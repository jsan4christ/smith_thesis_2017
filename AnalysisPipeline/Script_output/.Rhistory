names(otu_count_reshape)<-c(reshape_names,"species","count")
### ///////////////////////////////////////////// ###
### /////////         OTU Plot          ///////// ###
### ///////////////////////////////////////////// ###
otuPlot<- ggplot(otu_count_reshape)+
geom_area(aes(x=SERIAL,y=count,fill=species),
stat="identity",show.legend=F,position="fill")+#,width=1)+
mBio+
theme(axis.ticks = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(size = rel(1.5)),
legend.key.size=unit(8, "points"),
legend.title = element_blank(),
legend.text = element_text(size = rel(.5),face="italic"),
axis.title = element_text(size = rel(sizes)),
plot.margin=unit(c(2.5,40,2.5,10),units="points"),#margins
panel.grid.major.y=element_line(colour = "grey73"),
panel.grid.minor.x  = element_blank())+
ylab("Phylotype Relative\nAbundance (%)")+
geom_vline(xintercept = otu_count_reshape$SERIAL,size=rel(.2),col="grey")+
scale_fill_manual(values=subject_long_taxa_colors)+
ggtitle(paste0(s))+
annotate("rect", xmin=rect_min, xmax=rect_max, ymin=0, ymax=1, alpha=alpha_rect, fill=rect_fill)+
scale_x_continuous(breaks=time_breaks,label=time_label,limits=time_limits)
## Determine any dropped sample (post QC) time points and place an * above
dropped_samples.serial<-otu_count[otu_count$Pre_QC_ID %in% removed_samples$Pre_QC_ID,"SERIAL"]
if(length(dropped_samples.serial)!=0){otuPlot<-otuPlot+annotate("text", x =dropped_samples.serial , y = 1.01, label = "*",size=8)}
### ///////////////////////////////////////////// ###
### /////////      Nugent Plot          ///////// ###
### ///////////////////////////////////////////// ###
nugentPlot<-ggplot(data=nugent)+
geom_bar(aes(x=as.numeric(SERIAL),y=NUGENT_SCORE,width=.9,fill=color),
stat="identity",position = position_dodge(width=0.5))+
mBio+
geom_hline(yintercept = c(3,7),size=rel(1),col="pink")+ ## Defines Nugent score 3 & 7 (BV
theme(axis.ticks = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(size = rel(1.5*sizes)),
legend.position="none",
plot.margin=margins,
panel.grid.major.y=element_line(colour = "grey73"),
panel.grid.minor.x  = element_blank())+
ylab("Nugent\nScore")+
scale_fill_manual(values=c('black','red'))+
scale_x_continuous(breaks=time_breaks,label=time_label,limits=time_limits)+
annotate("rect", xmin=rect_min, xmax=rect_max, ymin=0, ymax=10, alpha=alpha_rect, fill=rect_fill)+
scale_y_continuous(breaks=c(0,3,7,10),limits=c(-1.25,10.5))
### ///////////////////////////////////////////// ###
### /////////     Metadata Plot         ///////// ###
### ///////////////////////////////////////////// ###
metaPlot<-ggplot(dailyDiaryMetadata, aes(x=as.numeric(SERIAL)))+
geom_point(aes(y=1*(as.numeric(VAG_DIS)==1),size=2),
pch=16,col='blue',position = position_dodge(width=0.5))+
geom_point(aes(y=2*(as.numeric(VAG_ODOR)==1),size=2),
pch=16,col='blue',position = position_dodge(width=0.5))+
geom_point(aes(y=3*(as.numeric(MENSTRUATION)>0),size=as.numeric(MENSTRUATION)),
col='red',pch=16, position = position_dodge(width=0.5))+
scale_size(range = c(2+2,4+2))+ ## for menstru point sizes. Bounded by 3 points on a scale.
mBio+
theme(legend.position="none",
plot.title = element_text(size = rel(sizes)),
axis.text = element_text(size = rel(2*sizes)),
axis.title = element_text(size = rel(sizes)),
axis.title.y=element_text(vjust=.2),
axis.title.x=element_text(vjust=-.2),
axis.text.y=element_text(size=rel(0.75)), ## change back to 0.75
plot.margin=unit(c(-2.5,40,5,5),units="points"),
panel.grid.major.y=element_line(colour = "grey73"),
panel.grid.minor.x  = element_blank())+
xlab("Week")+
ylab("")+
annotate("rect", xmin=rect_min, xmax=rect_max, ymin=1, ymax=3, alpha=alpha_rect, fill=rect_fill)+
scale_x_continuous(breaks=time_breaks,label=time_label,limits=time_limits)+
scale_y_continuous(breaks=1:3,labels = c("Discharge",
"Odor",
"Menstruation"),limits=c(0.5,3.5))
###### Determine if subject has low qualiyt daily dairy flag and annotate plot:
if(!sum(is.na(dailyDiaryMetadata$Diary_QUALITY_FLAG))){
min<-min(timeTable$SERIAL,na.rm = T)
max<-max(timeTable$SERIAL,na.rm = T)
middle.x<-(max-min)/2
middle.y<<-(16-1)/2
metaPlot<-metaPlot + annotate("text", x = middle.x,
y = middle.y, label = "?",
size=rel(40),
col="grey")
}
### ///////////////////////////////////////////// ###
### /////////          pH Plot          ///////// ###
### ///////////////////////////////////////////// ###
ph_normalization_factor<-3.5
## Notice the pH value scale is "normalized" by subtracting "ph_normalization_factor" from the actual pH value, then re-labeling the y axis. This is very dangerous, but ggplot will not permit bar plots that start from > 0 .
ph[ph$PH==2,"PH"]<-ph_normalization_factor-0.5
phPlot<-ggplot(ph,aes(x=as.numeric(SERIAL),
y=as.numeric(PH)-ph_normalization_factor,width=.9,fill=color))+
geom_bar(stat="identity",position = position_dodge(width=0.5))+
scale_fill_manual(values=c('black','red'))+
mBio+
geom_hline(yintercept = c(4.5-ph_normalization_factor),
size=rel(1),col="pink")+ ## Vaginal pH>4.5 one criteria for BV.
theme(axis.ticks = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_blank(),
axis.text = element_text(size = rel(1.5*sizes)),
legend.position="none",
plot.margin=margins,
panel.grid.major.y=element_line(colour = "grey73"),
panel.grid.minor.x  = element_blank())+
ylab("pH")+
annotate("rect", xmin=rect_min, xmax=rect_max, ymin=min(0,min(ph$PH,na.rm = T)-ph_normalization_factor-0.25), ymax= max(ph$PH,na.rm = T)+0.25-ph_normalization_factor, alpha=alpha_rect, fill=rect_fill)+
scale_x_continuous(breaks=time_breaks,label=time_label,limits=time_limits)+
scale_y_continuous(breaks=c(4,4.5,5,5.5)-ph_normalization_factor, limits=c(-0.75,5.8+0.25-ph_normalization_factor),labels=c("4","4.5","5","5.5"))
### ///////////////////////////////////////////// ###
### /////////    Tie Plots Together     ///////// ###
### ///////////////////////////////////////////// ###
## ////////////////////////// ##
## //Define plots as Grobs/// ##
## ////////////////////////// ##
grob.otuPlot <- ggplotGrob(otuPlot)
grob.nugentPlot <- ggplotGrob(nugentPlot)
grob.phPlot<-ggplotGrob(phPlot)
grob.metaPlot <- ggplotGrob(metaPlot)
## ////////////////////////// ##
## ///   Find max width   /// ##
## ////////////////////////// ##
maxWidth = grid::unit.pmax(grob.otuPlot$widths[1:6],
grob.nugentPlot$widths[1:5],
grob.phPlot$widths[1:5],
grob.metaPlot$widths[1:5])
## ////////////////////////// ##
## /Redefine common max width ##
## ////////////////////////// ##
grob.nugentPlot$widths[1:6] <- as.list(maxWidth)
grob.otuPlot$widths[1:6] <- as.list(maxWidth)
grob.metaPlot$widths[1:6] <- as.list(maxWidth)
grob.phPlot$widths[1:6]<-as.list(maxWidth)
### ///////////////////////////////////////////// ###
### /////////      Write/Draw Plot     ///////// ###
### ///////////////////////////////////////////// ###
cairo_ps(paste0(thesis_figures_directory,FIGURE_SUBJECT_PLOTS,s,".eps"),width = 11,height = 8.5)
grid.arrange(grob.otuPlot,
grob.nugentPlot,
grob.phPlot,
grob.metaPlot,
ncol=1,nrow=4,
heights=c(2.5,1,1,1))
dev.off()
}
## //////
## The following plots the figure legend containing colors for all taxa plotted in for loos
dummy_globalSpeciesList<-data.frame(SERIAL=1,species=global_species_list,count=1)
dummy_globalSpeciesList_plot<-ggplot(dummy_globalSpeciesList)+
geom_area(aes(x=SERIAL,y=count,fill=species,order=order(as.numeric(as.factor(dummy_globalSpeciesList$species)),decreasing = F)),
stat="identity",show.legend=T,position="fill")+#,width=1)+
mBio+
theme(axis.ticks = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_blank(),
legend.key.size=unit(8, "points"),
legend.title = element_blank(),
legend.text = element_text(size = rel(.5),face="italic"),
axis.title = element_text(size = rel(sizes)),
plot.margin=unit(c(2.5,40,2.5,10),units="points"),#margins
panel.grid.major.y=element_line(colour = "grey73"))+
scale_fill_manual(values=subject_long_taxa_colors)+
ggtitle("Global Species List Color Codes")
##Write legend to file
cairo_ps(paste0(thesis_figures_directory,FIGURE_SUBJECT_PLOTS,"GlobalSpeciesList.eps"),width = 11,height = 8.5)
dummy_globalSpeciesList_plot
dev.off()
# Chunk 16: RNA_quality_quant
## RIN Quality Distribition
TRL_RNA_Sample_QuantQual<-read.csv(paste0(R_script_input_directory,"TRL_RNA_Sample_Quality.csv"),header = F)
postscript(paste0(thesis_figures_directory,FIGURE_TRL_RIN_HIST))
p<-ggplot(TRL_RNA_Sample_QuantQual,aes(x=V1))+geom_histogram()+xlab("RINe")+ylab("Number of Samples")+geom_vline(xintercept = median(TRL_RNA_Sample_QuantQual$V1),col='red')+mBio
plot(p)
dev.off()
plot(p)
summary(TRL_RNA_Sample_QuantQual$V1)
summary(10*TRL_RNA_Sample_QuantQual[TRL_RNA_Sample_QuantQual$V1!=3.1,"V2"])
# Chunk 18: create_tables
TRL_counts_table<-read.csv(file=paste0(R_script_output_directory,TABLE_TRL_COUNTS_RAW),row.names = 1)
write.csv(TRL_counts_table,file=paste0(thesis_tables_directory,TABLE_TRL_COUNTS_RAW),row.names = T,quote=F)
## Filter out ambiguous, no feature reads. Make note of how many there are
TRL_counts_table[row.names(TRL_counts_table) %in% c("alignment_not_unique","no_feature","ambiguous"),]
## Percentage of ambiguous/no feature/non unique reads & alignment stats
(ambig_nofeat<-colSums(TRL_counts_table[row.names(TRL_counts_table) %in% c("alignment_not_unique","no_feature","ambiguous"),]))
(aligned<-colSums(TRL_counts_table[!row.names(TRL_counts_table) %in% c("alignment_not_unique","no_feature","ambiguous"),]))
alignment_stats<-data.frame(aligne=aligned,non_aligned=ambig_nofeat,aligned.percent=100*aligned/colSums(TRL_counts_table))
write.csv(alignment_stats,file = paste0(thesis_tables_directory,TABLE_TRL_ALIGNSTATS))
## Look at proportion of Ambigous/no feature/non-unique
hist(alignment_stats$aligned.percent,main="Percentage of Aligned reads",xlab="Percentage of total trimmed reads",ylab="Proportion")
ambig_nofeat_readpercent.high<-alignment_stats[(100-alignment_stats$aligned.percent)>80,]
paste0("The following samples have ambigous reads >80%: ", str_c(row.names(ambig_nofeat_readpercent.high),collapse = ", "))
#Filter out ambigous reads from counts
TRL_counts_table<-TRL_counts_table[!row.names(TRL_counts_table) %in% c("alignment_not_unique","no_feature","ambiguous"),]
TRL_counts_table<-TRL_counts_table[,order(names(TRL_counts_table))]
hist(log(as.matrix(TRL_counts_table)),main="log10 read counts, all samples",xlab="Log10 read count")
##Create Design Table
TRL_design<-data.frame(Sample=names(TRL_counts_table))
row.names(TRL_design)<-TRL_design$Sample
TRL_design<-separate(TRL_design,Sample,sep = "_",into = c("CellLine","BCS","DROP","ExposureTime","rep")) %>% dplyr::select(-c(CellLine,DROP))
## Create replicate #, lactobacillus indicator. Then combine BCS and exposure time for 'group1' for eventually creating constrasts
TRL_design$rep<-as.numeric(gsub(TRL_design$rep,pattern = "rep",replacement = ""))
TRL_design$Lactobacillus<-grepl(TRL_design$BCS,pattern = "^L")
TRL_design$group1 <- factor(paste(TRL_design$BCS,TRL_design$ExposureTime,sep="."))
TRL_design$BCS<-factor(TRL_design$BCS,levels = c("LCRISPATUS","LJENSENII","LINERS","GVAGINALIS","MEDIA"),ordered = T)
TRL_design$ExposureTime<-factor(TRL_design$ExposureTime,levels = c("4HR","13HR","22HR"),ordered=T)
sample_order<-with(TRL_design,order(ExposureTime,BCS,rep))
##Make an expression set object for coupled handling of coutns and design matrix
TRL_design<-TRL_design[sample_order,]
TRL_counts_table<-TRL_counts_table[,sample_order]
TRL_counts_meta<-ExpressionSet(assayData = as.matrix(TRL_counts_table),phenoData  = AnnotatedDataFrame(TRL_design))
# Chunk 20: drop_samples
dropped_TRL_samples<-c("VK2_MEDIA_BCS_4HR_rep3","VK2_LCRISPATUS_BCS_13HR_rep3") ## determined from replciate plots and # of ambigous (rRNA) reads.
##Drop poor QC samples
TRL_counts_meta.qc<-subset_ExpressionSet(TRL_counts_meta,filterOut =dropped_TRL_samples )
## Proportion of genes with at least 1 read across all samples
sum(rowSums(exprs(TRL_counts_meta.qc)>0)>0)/nrow(exprs(TRL_counts_meta.qc))
#exprs(TRL_counts_meta.qc)[rowSums(exprs(TRL_counts_meta.qc)>0)>0,]
##Summary of # of samples with at least one read across all samples
summary(rowSums(exprs(TRL_counts_meta.qc)[rowSums(exprs(TRL_counts_meta.qc)>0)>0,]>0))
##Total post QC samples:
ncol(exprs(TRL_counts_meta.qc))
## Summary of remaining total read counts
summary(colSums(exprs(TRL_counts_meta.qc)))
(reps_per_treatment<-ddply(data.frame(pData(TRL_counts_meta.qc)),c("BCS","ExposureTime"),summarise,n=length(BCS)))
# Chunk 21
## take counts table design created above and make edgeR object
design <-model.matrix(~0+group1,data = pData(TRL_counts_meta.qc))
# Chunk 23: perform_LRT
load(paste0(R_script_output_directory,"TRL_glmFit.RData"))
## Go through each pait-wise comparison in constarsts and compute differential expression using glmLRT
contr<-makeContrasts(
LCGV.4="group1LCRISPATUS.4HR-group1GVAGINALIS.4HR",
LCM.4="group1LCRISPATUS.4HR-group1MEDIA.4HR",
LJGV.4="group1LJENSENII.4HR-group1GVAGINALIS.4HR",
LJM.4="group1LJENSENII.4HR-group1MEDIA.4HR",
LIGV.4="group1LINERS.4HR-group1GVAGINALIS.4HR",
LIM.4="group1LINERS.4HR-group1MEDIA.4HR",
LCLJ.4="group1LCRISPATUS.4HR-group1LJENSENII.4HR",
LCLI.4="group1LCRISPATUS.4HR-group1LINERS.4HR",
LJLI.4="group1LJENSENII.4HR-group1LINERS.4HR",
GVM.4="group1GVAGINALIS.4HR-group1MEDIA.4HR",
LCGV.13="group1LCRISPATUS.13HR-group1GVAGINALIS.13HR",
LCM.13="group1LCRISPATUS.13HR-group1MEDIA.13HR",
LJGV.13="group1LJENSENII.13HR-group1GVAGINALIS.13HR",
LJM.13="group1LJENSENII.13HR-group1MEDIA.13HR",
LIGV.13="group1LINERS.13HR-group1GVAGINALIS.13HR",
LIM.13="group1LINERS.13HR-group1MEDIA.13HR",
LCLJ.13="group1LCRISPATUS.13HR-group1LJENSENII.13HR",
LCLI.13="group1LCRISPATUS.13HR-group1LINERS.13HR",
LJLI.13="group1LJENSENII.13HR-group1LINERS.13HR",
GVM.13="group1GVAGINALIS.13HR-group1MEDIA.13HR",
LCGV.22="group1LCRISPATUS.22HR-group1GVAGINALIS.22HR",
LCM.22="group1LCRISPATUS.22HR-group1MEDIA.22HR",
LJGV.22="group1LJENSENII.22HR-group1GVAGINALIS.22HR",
LJM.22="group1LJENSENII.22HR-group1MEDIA.22HR",
LIGV.22="group1LINERS.22HR-group1GVAGINALIS.22HR",
LIM.22="group1LINERS.22HR-group1MEDIA.22HR",
LCLJ.22="group1LCRISPATUS.22HR-group1LJENSENII.22HR",
LCLI.22="group1LCRISPATUS.22HR-group1LINERS.22HR",
LJLI.22="group1LJENSENII.22HR-group1LINERS.22HR",
GVM.22="group1GVAGINALIS.22HR-group1MEDIA.22HR",
levels=design
)
desets<-list()
comparisons<-names(data.frame(contr))
#postscript(paste0(R_script_output_directory,"TRL_SmearPlots.eps"),height = 8,width = 10)
for(comparison in comparisons){
#comparison<-"LCGV.13"
comp<-glmLRT(TRL_glmFit,contrast = contr[,comparison]) ## DE using constrast
de.table<-comp$table[abs(comp$table$logFC)>1 & comp$table$logCPM>1 & p.adjust(comp$table$PValue,method = "fdr")<=0.01,]
comp$table$PValue.adj<-p.adjust(comp$table$PValue,method = "fdr")
desets[[comparison]]<-list(detags=nrow(de.table),fulltable=comp$table)
#plotSmear(comp,de.tags = names(de.table),main=paste0(comparison,": ",length(detags)," DE genes"))
}
desets$LCGV.4$detags
# Chunk 24: IPA
##Timecourse files are from IPA- contain pathway list and activation z values.
pathway_zscore_files<-list.files(path = R_script_input_directory, pattern = "timecourse.txt")
pathway_zscores<-data.frame(Canonical.Pathway="DROP")
functions<-data.frame(Comparison="DROP",Categories="DROP",Diseases.or.Functions.Annotation="DROP",p.Value=1,Predicted.Activation.State="DROP",Activation.z.score=0,Flags="DROP", Molecules="DROP")
for(tab in pathway_zscore_files){
#tab<-"LCGV_LCM_timecourse.txt"
newt<-  read.table(paste0(R_script_input_directory,tab),header = T,sep = "\t",skip = 1,na.strings = "N/A",stringsAsFactors = F) %>% dplyr::select(-X)
pathway_zscores<-merge(newt,pathway_zscores,all = T)
}
## Put pathway z scores into matricies and then split absed on G. vag or medium reference
pathway_zscores.matrix<-as.matrix(pathway_zscores[,2:ncol(pathway_zscores)])
row.names(pathway_zscores.matrix)<-pathway_zscores$Canonical.Pathway
pathway_zscores.matrix<-pathway_zscores.matrix[rowSums(abs(pathway_zscores.matrix),na.rm = T)>0,colSums(abs(pathway_zscores.matrix),na.rm = T)>0]
pathway_zscores.melt<-melt(pathway_zscores,id.vars = "Canonical.Pathway")
row.names(pathway_zscores)<-pathway_zscores$Canonical.Pathway
pathway_zscores.matrix[is.na(pathway_zscores.matrix)]<-0
## Create a design table for the pathways
Pathways_design<-data.frame(comparison=names(data.frame(pathway_zscores.matrix)))
Pathways_design$comp<-sapply(strsplit(as.character(Pathways_design$comparison),"\\."),function(x) x[[1]])
Pathways_design$ExposureTime<-sapply(strsplit(as.character(Pathways_design$comparison),"\\."),function(x) x[[2]])
Pathways_design$L<-sapply(strsplit(Pathways_design$comp,split = "*"),function(x) paste0(x[[1]],x[[2]]))
Pathways_design$ref<-sapply(strsplit(Pathways_design$comp,split = "*"),function(x) paste0(x[[3]]))
row.names(Pathways_design)<-Pathways_design$comparison
## Map mapthway names to classifications
path_type_map<-read.csv(paste0(R_script_input_directory,"Pathway_classification.csv"),stringsAsFactors = F)
## Subset to look at only cell culture medium references
medium_comparisons<-names(data.frame(pathway_zscores.matrix))[grepl(names(data.frame(pathway_zscores.matrix)),pattern = "M")]
pathway_zscores.matrix.medium<-pathway_zscores.matrix[,names(data.frame(pathway_zscores.matrix)) %in% medium_comparisons]
## Summary table for pathway classification
summary_pathways<-cbind(data.frame(num_cycle.p=colSums(pathway_zscores.matrix.medium[row.names(data.frame(pathway_zscores.matrix.medium)) %in% path_type_map[path_type_map$class=="c","pathway"],]>2)),
data.frame(num_cycle.n=colSums(pathway_zscores.matrix.medium[row.names(data.frame(pathway_zscores.matrix.medium)) %in% path_type_map[path_type_map$class=="c","pathway"],]<(-2))),
data.frame(num_immune.p=colSums(pathway_zscores.matrix.medium[row.names(data.frame(pathway_zscores.matrix.medium)) %in% path_type_map[path_type_map$class=="i","pathway"],]>2)),
data.frame(num_immune.n=colSums(pathway_zscores.matrix.medium[row.names(data.frame(pathway_zscores.matrix.medium)) %in% path_type_map[path_type_map$class=="i","pathway"],]<(-2))),
data.frame(num_immune_pro.n=colSums(pathway_zscores.matrix.medium[row.names(data.frame(pathway_zscores.matrix.medium)) %in% path_type_map[path_type_map$X=="pro","pathway"],]<(-2))),
data.frame(num_immune_pro.p=colSums(pathway_zscores.matrix.medium[row.names(data.frame(pathway_zscores.matrix.medium)) %in% path_type_map[path_type_map$X=="pro","pathway"],]>2)))
summary_pathways$comparison<-row.names(summary_pathways)
summary_pathways<-merge(summary_pathways,Pathways_design)
## Write table summarizing the number of pathways above or below z score, grouped by pathway category
write.csv(summary_pathways,paste0(thesis_tables_directory,TABLE_TRL_SUMMARY_PATHWAYS),row.names=F,quote=F)
##Sort # of z>2 pathways by negative cycle, positive immune and negative immune
summary_pathways[order(summary_pathways$num_cycle.n,decreasing = T),]
summary_pathways[order(summary_pathways$num_immune.p,decreasing = T),]
summary_pathways[order(summary_pathways$num_immune.n,decreasing = T),]
## Use pathways that are expressed abs(z-score)>2 in 10% of comparisons
pathway_zscores.matrix.medium<-pathway_zscores.matrix.medium[(rowSums(abs(pathway_zscores.matrix.medium)>2))>=.1*ncol(pathway_zscores.matrix.medium),]
## Clean up some of the pathway names in pathway map
path_type_map[path_type_map$pathway=="NF-_B Signaling","pathway"]<-"NF-κB Signaling"
path_type_map[path_type_map$pathway=="PKC_ Signaling in T Lymphocytes","pathway"]<-"PKCθ Signaling in T Lymphocytes"
path_type_map[path_type_map$X=="pro","class"]<-"pro"
## Add in pathway classification based on mapping file
pathway_zscores.matrix.medium<-data.frame(pathway_zscores.matrix.medium)
pathway_zscores.matrix.medium$pathway<-row.names(pathway_zscores.matrix.medium)
pathway_zscores.matrix.medium<-merge(pathway_zscores.matrix.medium,path_type_map) ## maps classifications to pathway names
row.names(pathway_zscores.matrix.medium)<-pathway_zscores.matrix.medium$pathway
table(path_type_map[path_type_map$pathway %in% row.names(data.frame(pathway_zscores.matrix.medium)),"class"])
## Melt the pathway z-scores table
pathway_zscores.medium.melt<-melt(pathway_zscores.matrix.medium,id.vars = c("class","X","pathway"))
pathway_zscores.medium.melt<-dplyr::rename(pathway_zscores.medium.melt,"comparison"=variable)
pathway_zscores.medium.melt<-merge(pathway_zscores.medium.melt,Pathways_design)
## Ensure the exposure times and BCS are ordered
summary_pathways$ExposureTime<-as.numeric(summary_pathways$ExposureTime)
summary_pathways$ExposureTime<-factor(summary_pathways$ExposureTime,levels = c(4,13,22),ordered = T)
pathway_zscores.medium.melt$comp<-factor(pathway_zscores.medium.melt$comp,levels = c("LCM","LJM","LIM","GVM"),ordered = T)
pathway_zscores.medium.melt$ExposureTime<-factor(pathway_zscores.medium.melt$ExposureTime,levels = c("4","13","22"),ordered = T)
pathway_zscores.medium.melt$x<-paste(pathway_zscores.medium.melt$comp,pathway_zscores.medium.melt$pathway)
##Clean up the pathway names for better plotting
pathway_zscores.medium.melt[pathway_zscores.medium.melt$pathway=="Role of IL-17F in Allergic Inflammatory Airway Diseases","pathway"]<-"IL-17F in Allgc. Inflam. Arwy Dis."
pathway_zscores.medium.melt[pathway_zscores.medium.melt$pathway=="Role of Pattern Recognition Receptors in Recognition of Bacteria and Viruses","pathway"]<-"PRRs/ Bacteria and Viruses"
pathway_zscores.medium.melt[pathway_zscores.medium.melt$pathway=="Production of Nitric Oxide and Reactive Oxygen Species in Macrophages","pathway"]<-"Production of NO and ROS in Macrophages"
pathway_zscores.medium.melt[pathway_zscores.medium.melt$pathway=="PKCθ Signaling in T Lymphocytes","pathway"]<-"PKCθ Signaling"
pathway_zscores.medium.melt[pathway_zscores.medium.melt$pathway=="PI3K Signaling in B Lymphocytes","pathway"]<-"PI3K Signaling"
##Subset z-scores table by immune (proinflammatory) pathways or cell cycle pathways
pathway_zscores.medium.melt.immune<-dplyr::filter(pathway_zscores.medium.melt,class %in% c("pro", "i"))
pathway_zscores.medium.melt.cycle<-dplyr::filter(pathway_zscores.medium.melt,class %in% c("c"))
##Write figures
FIGURE_COMBINED_PATHWAYS_IMMUNE<-"FIGURE_3_2"
FIGURE_COMBINED_PATHWAYS_CYCLE<-"FIGURE_3_3"
postscript(paste0(thesis_figures_directory,FIGURE_COMBINED_PATHWAYS_IMMUNE,".eps"),width = 12,height = 6,horizontal = T)
ggplot(pathway_zscores.medium.melt.immune)+geom_tile(aes(x=ExposureTime,y=pathway,fill=value))+
scale_fill_gradient2(high="red",mid="white",low="blue",
na.value="yellow", midpoint=0)+facet_wrap(~comp,nrow=1)+
mBio+
theme(text = element_text(size=12),plot.margin = unit(c(0,30,0,0),units = "pt"))
dev.off()
postscript(paste0(thesis_figures_directory,FIGURE_COMBINED_PATHWAYS_CYCLE,".eps"),width = 12,height = 6,horizontal = T)
ggplot(pathway_zscores.medium.melt.cycle)+geom_tile(aes(x=ExposureTime,y=pathway,fill=value))+
scale_fill_gradient2(high="red",mid="white",low="blue",
na.value="yellow", midpoint=0)+facet_wrap(~comp,nrow=1)+
mBio+
theme(text = element_text(size=12),plot.margin = unit(c(0,30,0,0),units = "pt"))
dev.off()
# Chunk 25: plot_FC
## Pull out DE tables from each comparison within list, and write this table to file
all_genes<-data.frame(gene=row.names(exprs(TRL_counts_meta.qc)))
row.names(all_genes)<-all_genes$gene
num_de_genes<-data.frame(num_de_genes=sapply(desets,function(x) x[[1]]))
num_de_genes$comparison<-row.names(num_de_genes)
write.csv(num_de_genes[num_de_genes$comparison %in% medium_comparisons,],file=paste0(m=thesis_tables_directory,TABLE_TRL_NUMDEGENES))
##Exctract genes from the list
for(i in names(desets)){
#i<-"LCGV.4"
tmp.df<-data.frame(desets[[i]]$fulltable)
names(tmp.df)<-paste0(i,".",names(tmp.df))
tmp.df$gene<-row.names(desets[[i]]$fulltable)
all_genes<-join(all_genes,tmp.df,"gene")
}
hist(as.matrix(dplyr::select(all_genes,ends_with("logFC"))))
hist(as.matrix(dplyr::select(all_genes,ends_with("logCPM"))))
quantile(as.matrix(dplyr::select(all_genes,ends_with("logFC"))),probs = c(0.68,0.95))
all_genes[1:5,1:6]
row.names(all_genes)<-all_genes$gene
dplyr::select(all_genes[all_genes$gene %in% c("EGFR","EP300","HDAC4","CDKN1A"),],contains("M")) %>% dplyr::select(contains("PValue.adj"))
write.csv(all_genes,paste0(thesis_tables_directory,TABLE_EDGER_RESULTS),quote = F,row.names = F)
#write.table(all_genes,paste0(thesis_tables_directory,"TABLE_A11.txt"),quote = F,row.names = F,sep="\t")
#write.csv(dplyr::select(all_genes,c(gene,ends_with("logFC"),ends_with("PValue"))),paste0(root_directory,"edgeR_results_LCPval.csv"),quote = F,row.names = F)
all_genes.melt<-melt(all_genes)
all_genes.melt<-separate(all_genes.melt,"variable",sep="\\.",into = c("comparison","ExposureTime","value_type"))
color_map<-c("LCGV"=unname(subject_long_taxa_colors["Lactobacillus_crispatus"]),"LCM"=unname(subject_long_taxa_colors["Lactobacillus_crispatus"]),"LJGV"=unname(subject_long_taxa_colors["Lactobacillus_jensenii"]),"LJM"=unname(subject_long_taxa_colors["Lactobacillus_jensenii"]),"LIM"=unname(subject_long_taxa_colors["Lactobacillus_iners"]),"LIGV"=unname(subject_long_taxa_colors["Lactobacillus_iners"]),"GVM"=unname(subject_long_taxa_colors["Gardnerella_vaginalis"]))
line_map<-data.frame(comparison=names(color_map),line_type=c("solid","dashed","solid","dashed","dashed","solid","dashed"))
all_genes_colors<-data.frame(comparison=names(color_map),colr=unname(color_map))
all_genes.melt<-merge(all_genes.melt,all_genes_colors)
all_genes.melt<-merge(all_genes.melt,line_map)
all_genes.melt<-merge(all_genes.melt,dplyr::select(Pathways_design,c(comp,L,ref)),all.x=T,by.x="comparison",by.y="comp")
all_genes.melt$ExposureTime<-as.numeric(all_genes.melt$ExposureTime)
postscript(paste0(thesis_figures_directory,"Longitudinal_genes.immune.eps"),width = 10,height = 8)
#TNF","IRAK2","IRF1","NFKBIA"
immune_genes<-c("IL6","CXCL8")
long_plot.immune<-ggplot(dplyr::filter(all_genes.melt,gene %in% immune_genes & value_type=="logFC" ),aes(x=ExposureTime,y=value,col=comparison))+geom_point(size=2)+geom_smooth(se=F)+
facet_wrap(~gene+ref,scales = "free_y",nrow=2)+theme_bw()+scale_color_manual(values = color_map)+geom_hline(yintercept =0)+geom_hline(yintercept =c(-1,0,1))+ #scale_linetype_manual(values=c("G"=2,"M"=1))+
xlab("Exposure Time (hours)")+ylab("log (Fold Change)")+scale_x_continuous(breaks=c(4,13,22))#geom_smooth(se = F)
plot(long_plot.immune)
dev.off()
plot(long_plot.immune)
## Plot the cycle-related longitudinal gene expression
postscript(paste0(thesis_figures_directory,"Longitudinal_gene_expression.cycle.eps"),width = 10,height = 8)
cycle_genes<-c("CCNE2","ESR1","EGFR","CDKN1A","CCND1","CDK4","HDAC4","EP300")
long_plot.cc<-ggplot(dplyr::filter(all_genes.melt,gene %in% cycle_genes & value_type=="logFC" ),aes(x=as.numeric(ExposureTime),y=value,col=comparison,linetype=ref))+geom_point(size=2)+geom_smooth(se=F)+
facet_wrap(~gene,scales = "free_y",nrow =2)+theme_bw()+scale_color_manual(values = color_map)+geom_hline(yintercept =0)+geom_hline(yintercept =c(-1,0,1))+ scale_linetype_manual(values=c("G"=2,"M"=1))+xlab("Exposure Time (hours)")+ylab("log (Fold Change)")+scale_x_continuous(breaks=c(4,13,22))#geom_smooth(se = F)
plot(long_plot.cc)
dev.off()
plot(long_plot.cc)
presentation_genes<-c("HDAC4","EP300","CDKN1A")
rbind()
tmp2<-dplyr::filter(all_genes.melt,gene %in% presentation_genes & value_type=="PValue" & ref=="M")
tmp2$value_type<-"DE"
all_genes.melt[all_genes.melt$value_type=="DE",][all_genes.melt[all_genes.melt$value_type=="DE","value"]<0.01,"value"]<-"*"
all_genes.melt[all_genes.melt$value_type=="DE",][all_genes.melt[all_genes.melt$value_type=="DE","value"]!="*","value"]<-""
all_genes.melt<-rbind(all_genes.melt,tmp2)
head(all_genes.melt)
ggplot(pathway_zscores.medium.melt.immune)+geom_tile(aes(x=ExposureTime,y=pathway,fill=value))+
scale_fill_gradient2(high="red",mid="white",low="blue",
na.value="yellow", midpoint=0)+facet_wrap(~comp,nrow=1)+
mBio+
theme(text = element_text(size=12),plot.margin = unit(c(0,30,0,0),units = "pt"))
postscript(paste0(thesis_figures_directory,FIGURE_COMBINED_PATHWAYS_IMMUNE,".eps"),width = 12,height = 6,horizontal = T)
ggplot(pathway_zscores.medium.melt.immune)+geom_tile(aes(x=ExposureTime,y=pathway,fill=value))+
scale_fill_gradient2(high="red",mid="white",low="blue",
mBio+
na.value="yellow", midpoint=0)+facet_wrap(~comp,nrow=1)+
dev.off()
postscript(paste0(thesis_figures_directory,FIGURE_COMBINED_PATHWAYS_IMMUNE,".eps"),width = 12,height = 6,horizontal = T)
ggplot(pathway_zscores.medium.melt.immune)+geom_tile(aes(x=ExposureTime,y=pathway,fill=value))+
scale_fill_gradient2(high="red",mid="white",low="blue",
na.value="yellow", midpoint=0)+facet_wrap(~comp,nrow=1)+
mBio+
theme(text = element_text(size=12),plot.margin = unit(c(0,50,0,20),units = "pt"))
dev.off()
cairo_ps(paste0(thesis_figures_directory,FIGURE_COMBINED_PATHWAYS_IMMUNE,".eps"),width = 12,height = 6,horizontal = T)
ggplot(pathway_zscores.medium.melt.immune)+geom_tile(aes(x=ExposureTime,y=pathway,fill=value))+
scale_fill_gradient2(high="red",mid="white",low="blue",
na.value="yellow", midpoint=0)+facet_wrap(~comp,nrow=1)+
mBio+
theme(text = element_text(size=12),plot.margin = unit(c(0,50,0,20),units = "pt"))
dev.off()
cairo_ps(paste0(thesis_figures_directory,FIGURE_COMBINED_PATHWAYS_IMMUNE,".eps"))
ggplot(pathway_zscores.medium.melt.immune)+geom_tile(aes(x=ExposureTime,y=pathway,fill=value))+
scale_fill_gradient2(high="red",mid="white",low="blue",
na.value="yellow", midpoint=0)+facet_wrap(~comp,nrow=1)+
mBio+
theme(text = element_text(size=12),plot.margin = unit(c(0,50,0,20),units = "pt"))
dev.off()
dev.off()
cairo_ps(paste0(thesis_figures_directory,FIGURE_COMBINED_PATHWAYS_IMMUNE,".eps"))
ggplot(pathway_zscores.medium.melt.immune)+geom_tile(aes(x=ExposureTime,y=pathway,fill=value))+
scale_fill_gradient2(high="red",mid="white",low="blue",
na.value="yellow", midpoint=0)+facet_wrap(~comp,nrow=1)+
mBio+
theme(text = element_text(size=12),plot.margin = unit(c(0,50,0,20),units = "pt"))
dev.off()
cairo_ps(paste0(thesis_figures_directory,FIGURE_COMBINED_PATHWAYS_IMMUNE,".eps"),width=8,height=10)
ggplot(pathway_zscores.medium.melt.immune)+geom_tile(aes(x=ExposureTime,y=pathway,fill=value))+
scale_fill_gradient2(high="red",mid="white",low="blue",
na.value="yellow", midpoint=0)+facet_wrap(~comp,nrow=1)+
mBio+
theme(text = element_text(size=12),plot.margin = unit(c(0,50,0,20),units = "pt"))
dev.off()
cairo_ps(paste0(thesis_figures_directory,FIGURE_COMBINED_PATHWAYS_IMMUNE,".eps"),width=80,height=10)
ggplot(pathway_zscores.medium.melt.immune)+geom_tile(aes(x=ExposureTime,y=pathway,fill=value))+
scale_fill_gradient2(high="red",mid="white",low="blue",
na.value="yellow", midpoint=0)+facet_wrap(~comp,nrow=1)+
mBio+
theme(text = element_text(size=12),plot.margin = unit(c(0,50,0,20),units = "pt"))
dev.off()
cairo_ps(paste0(thesis_figures_directory,FIGURE_COMBINED_PATHWAYS_IMMUNE,".eps"),width=10,height=8)
ggplot(pathway_zscores.medium.melt.immune)+geom_tile(aes(x=ExposureTime,y=pathway,fill=value))+
scale_fill_gradient2(high="red",mid="white",low="blue",
na.value="yellow", midpoint=0)+facet_wrap(~comp,nrow=1)+
mBio+
theme(text = element_text(size=12),plot.margin = unit(c(0,50,0,20),units = "pt"))
dev.off()
cairo_ps(paste0(thesis_figures_directory,FIGURE_COMBINED_PATHWAYS_CYCLE,".eps"),width=10,height=8)
ggplot(pathway_zscores.medium.melt.cycle)+geom_tile(aes(x=ExposureTime,y=pathway,fill=value))+
scale_fill_gradient2(high="red",mid="white",low="blue",
na.value="yellow", midpoint=0)+facet_wrap(~comp,nrow=1)+
mBio+
theme(text = element_text(size=12),plot.margin = unit(c(0,30,0,0),units = "pt"))
dev.off()
cairo_ps(paste0(thesis_figures_directory,FIGURE_COMBINED_PATHWAYS_IMMUNE,".eps"),width=10,height=8)
ggplot(pathway_zscores.medium.melt.immune)+geom_tile(aes(x=ExposureTime,y=pathway,fill=value))+
scale_fill_gradient2(high="red",mid="white",low="blue",
na.value="yellow", midpoint=0)+facet_wrap(~comp,nrow=1)+
mBio+
theme(text = element_text(size=12),plot.margin = unit(c(0,30,0,0),units = "pt"))
dev.off()
cairo_ps(paste0(thesis_figures_directory,FIGURE_COMBINED_PATHWAYS_CYCLE,".eps"),width=10,height=8)
ggplot(pathway_zscores.medium.melt.cycle)+geom_tile(aes(x=ExposureTime,y=pathway,fill=value))+
scale_fill_gradient2(high="red",mid="white",low="blue",
na.value="yellow", midpoint=0)+facet_wrap(~comp,nrow=1)+
mBio+
theme(text = element_text(size=12),plot.margin = unit(c(0,30,0,0),units = "pt"))
dev.off()
