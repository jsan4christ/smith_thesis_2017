edgeR_results.melt<-separate(edgeR_results.melt,"variable",sep="\\.",into = c("comparison","ExposureTime","value_type"))
## Assign colors to BCS
color_map<-c("LCGV"=unname(subject_long_taxa_colors["Lactobacillus_crispatus"]),"LCM"=unname(subject_long_taxa_colors["Lactobacillus_crispatus"]),"LJGV"=unname(subject_long_taxa_colors["Lactobacillus_jensenii"]),"LJM"=unname(subject_long_taxa_colors["Lactobacillus_jensenii"]),"LIM"=unname(subject_long_taxa_colors["Lactobacillus_iners"]),"LIGV"=unname(subject_long_taxa_colors["Lactobacillus_iners"]),"GVM"=unname(subject_long_taxa_colors["Gardnerella_vaginalis"]))
color_map<-c(color_map,c("L. crispatus BCS"=unname(color_map["LCM"]),"L. jensenii BCS"=unname(color_map["LJM"]),"L. iners BCS"=unname(color_map["LIM"]), "G. vaginalis BCS"=unname(color_map["GVM"])))
## Use different line types for G. vaginalis and medium (if used)
line_map<-data.frame(comparison=names(color_map),line_type=c("solid","dashed","solid","dashed","dashed","solid","dashed","solid","solid","solid","solid"))
## Merge tables together to map DE results to plot annotations
edgeR_results_colors<-data.frame(comparison=names(color_map),colr=unname(color_map))
edgeR_results.melt<-merge(edgeR_results.melt,edgeR_results_colors)
edgeR_results.melt<-merge(edgeR_results.melt,line_map)
edgeR_results.melt<-merge(edgeR_results.melt,dplyr::select(Pathways_design,c(comp,L,ref)),all.x=T,by.x="comparison",by.y="comp")
edgeR_results.melt$ExposureTime<-as.numeric(edgeR_results.melt$ExposureTime)
## Format and plot the cell cycle pathway-related gene expression's logFC over the timecourse
cycle_genes<-c("HDAC4","EP300","CDKN1A","CDK4","CCND1","CCNE2","ESR1","EGFR") ## Select which cell cycle genes to plot
cycle_genes_expression<- dplyr::filter(edgeR_results.melt,gene %in% cycle_genes &  ref=="M" ) ## Only include the cell cycle genes and cell culture medium as the reference
cycle_genes_expression<-unique(cycle_genes_expression)
cycle_genes_expression<-spread(cycle_genes_expression,key = value_type,value = value) ## This will make the logFC, FDR, and other DE attributes into colums for easier plotting. The plot will use logFC and FDR information
cycle_genes_expression$gene<-factor(cycle_genes_expression$gene,levels = cycle_genes,ordered = T) ## Maintain order of genes- this follows logical order discussed in thesis.
cycle_genes_expression[cycle_genes_expression$Pvalue_adj<0.01,"DE.pval"]<-"*" ## Annotate which samples are DE by FDR
cycle_genes_expression$comparison_label<-factor(cycle_genes_expression$comparison,levels = c("LCM","LJM","LIM","GVM"),labels=c("L. crispatus BCS","L. jensenii BCS","L. iners BCS", "G. vaginalis BCS"),ordered = T)
## Make plot
long_plot.cc<-ggplot(cycle_genes_expression)+geom_point(aes(x=as.numeric(ExposureTime),y=logFC,col=comparison_label),size=3)+
geom_line(aes(x=as.numeric(ExposureTime),y=logFC,col=comparison_label),size=2)+
facet_wrap(~gene,scales = "free_y",nrow =2)+theme_bw()+scale_color_manual(values = color_map)+
geom_hline(yintercept =0)+geom_hline(yintercept =c(-1,0,1),lty=2)+xlab("Exposure Time (hours)")+
geom_text(aes(x=as.numeric(ExposureTime),y=logFC,label=DE.pval),size=8)+
journalFormat+
ylab("log (Fold Change)")+scale_x_continuous(breaks=c(4,13,22))
plot(long_plot.cc)
cairo_ps(paste0(thesis_figures_directory,FIGURE_LONGITDUINAL_GENEEXP.cycle),width = 8,height = 6)
plot(long_plot.cc)
dev.off()
# Chunk 26: Timestamp2
## Log session info
filewritable_time<-gsub(gsub(Sys.time(),pattern = " ",replacement = "_"),pattern = "-|:",replacement = "")
(sessionInfo_latex<-toLatex(sessionInfo()))
write(sessionInfo_latex,paste0(R_script_output_directory,"R_sessionInfo_",filewritable_time,".log.txt"))
timestamp()
##------ Sat Nov 25 11:17:42 2017 ------##
data.frame(unlist(fitness),
adjr2==lapply(lapply(fitness,summary),function(x) round(x$adj.r.squared,digits = 3)))
lm_input
fitness<-lm_input %>%
select(-LACTO_PROP) %>%
names() %>%
paste0('LACTO_PROP ~ `', .,'`') %>%
map(~lm(as.formula(.x), data = lm_input))
fitness
class(fitness)
lapply(fitness,FUN = function(x) x[[1]])
lapply(fitness,FUN = function(x) x[[1]][1])
lapply(fitness,FUN = function(x) x[[1]][2])
unlist(lapply(fitness,FUN = function(x) x[[1]][2]))
unlist(lapply(fitness,FUN = function(x) x[[1]][1]))
unlist(lapply(fitness,FUN = function(x) x[[1]][2]))
fitness
fitness
unlist(lapply(fitness,FUN = function(x) x[[1]][2]))
data.frame(unlist(lapply(fitness,FUN = function(x) x[[1]][2])))
data.frame(slope=unlist(lapply(fitness,FUN = function(x) x[[1]][2])))
data.frame(slope=unlist(lapply(fitness,FUN = function(x) x[[1]])))
data.frame(slope=unlist(lapply(fitness,FUN = function(x) x[[1]][2])),
intersecpt=unlist(lapply(fitness,FUN = function(x) x[[1]][1])))
data.frame(unlist(fitness),
adjr2==lapply(lapply(fitness,summary),function(x) round(x$adj.r.squared,digits = 3)))
fitness
summary(fitness)
nlist(lapply(fitness,FUN = function(x) summary(x))
summary(fitness)
data.frame(unlist(fitness),
adjr2==lapply(lapply(fitness,summary),function(x) round(x$adj.r.squared,digits = 3)))
#fitness<-apply(model_input[,names(model_input) %in% unique(topmir_plot_data$variable)],MARGIN = 2,function(s) summary(lm(model_input,LACTO_PROP~s)))
fitness.r2<-data.frame(adjr2=unlist(lapply(fitness,function(x) round(x$adj.r.squared,digits = 3))))
fitness.r2$variable<-row.names(fitness.r2)
print(fitness.r2[order(abs(fitness.r2$adjr2),decreasing = T),])
topmir_plot_data<-join(topmir_plot_data,fitness.r2)
topmir_plot_data$variable<-factor(x=topmir_plot_data$variable,levels = unique(topmir_plot_data[order(abs(topmir_plot_data$adjr2),decreasing = T),c("variable")]),ordered = T)
## Liner correlation coeff for miRNA expression data:
paste(apply(unique(dplyr::select(topmir_plot_data,c(variable,adjr2))) %>% dplyr::arrange(rev(adjr2)),MARGIN = 1,FUN = function(x) paste(sep =":" ,x[1],x[2])),sep=",")
## Collapse CSTs to a single CST super type
topmir_plot_data[topmir_plot_data$CST %in% c("III-A","III-B"),"CST"]<-"III"
topmir_plot_data[topmir_plot_data$CST %in% c("I-A","I-B"),"CST"]<-"I"
##FIXME make sure NA samples weren't use in RF-- samples without a lacto prop.
## Plot the miRNA expression figure
PLOT_EXPRESSION<-
ggplot(topmir_plot_data,aes(x=100*LACTO_PROP,y=value))+
stat_smooth(method = "lm",col='#FF5733',se=F)+ #
geom_point(aes(col=as.factor(CST)),size=3,show.legend = T)+
facet_wrap(~variable,scales = "free_y",nrow=2)+
ylab("Normalized Expression")+xlab("Lactobacillus spp. relative abundance (%)")+
journalFormat+
theme(text = element_text(size=20),axis.text.x = element_text(size=15))+
scale_x_continuous(breaks=seq(from = 0,to=100,by=20))+
scale_color_manual(values = cst.colors,guide = guide_legend(title = "CST"))
cairo_ps(paste0(thesis_figures_directory,FIGURE_TOPMIRS),width = 16,height = 8) #
plot(PLOT_EXPRESSION)
dev.off()
#library(Boruta)
#postscript(paste0(R_script_output_directory,"Boruta_optimization.ps"))
#Lacto_RF.Boruta<-Boruta(x=dplyr::select(model_input_Lactobacillus,-c(SID,LACTO_PROP)),y=model_input_Lactobacillus$LACTO_PROP)
#plot(Lacto_RF.Boruta,main="Nugent-RF Boruta unimportant feature removal")
#Lacto_RF.Boruta$finalDecision[Lacto_RF.Boruta$finalDecision=="Confirmed"]
#dev.off()
```
nlist(lapply(fitness,FUN = function(x) summary(x)))
lapply(fitness,FUN = function(x) summary(x))
summary(fitness)[1]
summary(fitness[1])
summary(fitness[[1]])
summary(fitness[[1]])$adj.r.squared
lapply(fitness,FUN = function(x) summary(x)$adj.r.squared)
data.frame(lapply(fitness,FUN = function(x) summary(x)$adj.r.squared))
data.frame(adj.r.squared=lapply(fitness,FUN = function(x) summary(x)$adj.r.squared))
data.frame(adj.r.squared=unlist(lapply(fitness,FUN = function(x) summary(x)$adj.r.squared)))
data.frame(slope=unlist(lapply(fitness,FUN = function(x) x[[1]][2])),
intersecpt=unlist(lapply(fitness,FUN = function(x) x[[1]][1])),
adj.r.squared=summary(x)$adj.r.squared)
data.frame(slope=unlist(lapply(fitness,FUN = function(x) x[[1]][2])),
intersecpt=unlist(lapply(fitness,FUN = function(x) x[[1]][1])),
adj.r.squared=unlist(lapply(fitness,FUN = function(x) summary(x)$adj.r.squared)
data.frame(adj.r.squared=unlist(lapply(fitness,FUN = function(x) summary(x)$adj.r.squared)))
summary(fitness[[1]])
data.frame(unlist(fitness),
adjr2==lapply(lapply(fitness,summary),function(x) round(x$adj.r.squared,digits = 3)))
#fitness<-apply(model_input[,names(model_input) %in% unique(topmir_plot_data$variable)],MARGIN = 2,function(s) summary(lm(model_input,LACTO_PROP~s)))
fitness.r2<-data.frame(adjr2=unlist(lapply(fitness,function(x) round(x$adj.r.squared,digits = 3))))
fitness.r2$variable<-row.names(fitness.r2)
print(fitness.r2[order(abs(fitness.r2$adjr2),decreasing = T),])
topmir_plot_data<-join(topmir_plot_data,fitness.r2)
topmir_plot_data$variable<-factor(x=topmir_plot_data$variable,levels = unique(topmir_plot_data[order(abs(topmir_plot_data$adjr2),decreasing = T),c("variable")]),ordered = T)
## Liner correlation coeff for miRNA expression data:
paste(apply(unique(dplyr::select(topmir_plot_data,c(variable,adjr2))) %>% dplyr::arrange(rev(adjr2)),MARGIN = 1,FUN = function(x) paste(sep =":" ,x[1],x[2])),sep=",")
## Collapse CSTs to a single CST super type
topmir_plot_data[topmir_plot_data$CST %in% c("III-A","III-B"),"CST"]<-"III"
topmir_plot_data[topmir_plot_data$CST %in% c("I-A","I-B"),"CST"]<-"I"
##FIXME make sure NA samples weren't use in RF-- samples without a lacto prop.
## Plot the miRNA expression figure
PLOT_EXPRESSION<-
ggplot(topmir_plot_data,aes(x=100*LACTO_PROP,y=value))+
stat_smooth(method = "lm",col='#FF5733',se=F)+ #
geom_point(aes(col=as.factor(CST)),size=3,show.legend = T)+
facet_wrap(~variable,scales = "free_y",nrow=2)+
ylab("Normalized Expression")+xlab("Lactobacillus spp. relative abundance (%)")+
journalFormat+
theme(text = element_text(size=20),axis.text.x = element_text(size=15))+
scale_x_continuous(breaks=seq(from = 0,to=100,by=20))+
scale_color_manual(values = cst.colors,guide = guide_legend(title = "CST"))
cairo_ps(paste0(thesis_figures_directory,FIGURE_TOPMIRS),width = 16,height = 8) #
plot(PLOT_EXPRESSION)
dev.off()
#library(Boruta)
#postscript(paste0(R_script_output_directory,"Boruta_optimization.ps"))
#Lacto_RF.Boruta<-Boruta(x=dplyr::select(model_input_Lactobacillus,-c(SID,LACTO_PROP)),y=model_input_Lactobacillus$LACTO_PROP)
#plot(Lacto_RF.Boruta,main="Nugent-RF Boruta unimportant feature removal")
#Lacto_RF.Boruta$finalDecision[Lacto_RF.Boruta$finalDecision=="Confirmed"]
#dev.off()
```
data.frame(slope=unlist(lapply(fitness,FUN = function(x) x[[1]][2])),
intersecpt=unlist(lapply(fitness,FUN = function(x) x[[1]][1])),
adj.r.squared=unlist(lapply(fitness,FUN = function(x) summary(x)$adj.r.squared)))
data.frame(unlist(lapply(fitness,FUN = function(x) g=x[[1]][2])),
intersecpt=unlist(lapply(fitness,FUN = function(x) x[[1]][1])),
adj.r.squared=unlist(lapply(fitness,FUN = function(x) summary(x)$adj.r.squared)))
data.frame(unlist(lapply(fitness,FUN = function(x) g=c(x[[1]][2],x[[1]][1]))),
intersecpt=unlist(lapply(fitness,FUN = function(x) x[[1]][1])),
adj.r.squared=unlist(lapply(fitness,FUN = function(x) summary(x)$adj.r.squared)))
data.frame(unlist(lapply(fitness,FUN = function(x) g=data.frame(c=x[[1]][2],d=x[[1]][1]))),
intersecpt=unlist(lapply(fitness,FUN = function(x) x[[1]][1])),
adj.r.squared=unlist(lapply(fitness,FUN = function(x) summary(x)$adj.r.squared)))
data.frame(lapply(fitness,FUN = function(x) g=data.frame(c=x[[1]][2],d=x[[1]][1])),
intersecpt=unlist(lapply(fitness,FUN = function(x) x[[1]][1])),
adj.r.squared=unlist(lapply(fitness,FUN = function(x) summary(x)$adj.r.squared)))
data.frame(slope=unlist(lapply(fitness,FUN = function(x) x[[1]][2])),
intersecpt=unlist(lapply(fitness,FUN = function(x) x[[1]][1])),
adj.r.squared=unlist(lapply(fitness,FUN = function(x) round(summary(x)$adj.r.squared,digits = 3))))
fitness.r2
fitness.r2<-data.frame(adjr2=unlist(lapply(fitness,function(x) round(x$adj.r.squared,digits = 3))))
row.names(fitness.r2)
fitness.r2<-data.frame(slope=unlist(lapply(fitness,FUN = function(x) x[[1]][2])),
intersecpt=unlist(lapply(fitness,FUN = function(x) x[[1]][1])),
adj.r.squared=unlist(lapply(fitness,FUN = function(x) round(summary(x)$adj.r.squared,digits = 3))))
row.names(fitness.r2)
fitness.r2$variable<-gsub(row.names(fitness.r2),"`",replacement = "")
gsub(row.names(fitness.r2),"`",replacement = "")
fitness.r2<-data.frame(slope=unlist(lapply(fitness,FUN = function(x) x[[1]][2])),
intersecpt=unlist(lapply(fitness,FUN = function(x) x[[1]][1])),
adj.r.squared=unlist(lapply(fitness,FUN = function(x) round(summary(x)$adj.r.squared,digits = 3))))
gsub(row.names(fitness.r2),"`",replacement = "")
row.names(fitness.r2)
gsub(row.names(fitness.r2),pattern = "`",replacement = "")
fitness.r2$variable<-gsub(row.names(fitness.r2),pattern = "`",replacement = "")
fitness.r2
print(fitness.r2[order(abs(fitness.r2$adj.r.squared),decreasing = T),])
print(fitness.r2[order(abs(fitness.r2$slope),decreasing = T),])
topmir_plot_data
topmir_plot_data<-join(topmir_plot_data,fitness.r2)
topmir_plot_data
topmir_plot_data$variable<-factor(x=topmir_plot_data$variable,levels = unique(topmir_plot_data[order(abs(topmir_plot_data$adjr2),decreasing = T),c("variable")]),ordered = T)
topmir_plot_data$variable
topmir_plot_data$variable<-factor(x=topmir_plot_data$variable,levels = unique(topmir_plot_data[order(abs(topmir_plot_data$adj.r.squared),decreasing = T),c("variable")]),ordered = T)
topmir_plot_data$variable<-factor(x=topmir_plot_data$variable,levels = unique(topmir_plot_data[order(abs(topmir_plot_data$adj.r.squared),decreasing = T),c("variable")]),ordered = T)
topmir_plot_data$variable
paste(apply(unique(dplyr::select(topmir_plot_data,c(variable,adj.r.squared))) %>% dplyr::arrange(rev(adj.r.squared)),MARGIN = 1,FUN = function(x) paste(sep =":" ,x[1],x[2])),sep=",")
paste(apply(unique(dplyr::select(topmir_plot_data,c(variable,slope))) %>% dplyr::arrange(rev(slope)),MARGIN = 1,FUN = function(x) paste(sep =":" ,x[1],x[2])),sep=",")
topmir_plot_data[topmir_plot_data$CST %in% c("III-A","III-B"),"CST"]<-"III"
topmir_plot_data[topmir_plot_data$CST %in% c("I-A","I-B"),"CST"]<-"I"
PLOT_EXPRESSION<-
ggplot(topmir_plot_data,aes(x=100*LACTO_PROP,y=value))+
stat_smooth(method = "lm",col='#FF5733',se=F)+ #
geom_point(aes(col=as.factor(CST)),size=3,show.legend = T)+
facet_wrap(~variable,scales = "free_y",nrow=2)+
ylab("Normalized Expression")+xlab("Lactobacillus spp. relative abundance (%)")+
journalFormat+
theme(text = element_text(size=20),axis.text.x = element_text(size=15))+
scale_x_continuous(breaks=seq(from = 0,to=100,by=20))+
scale_color_manual(values = cst.colors,guide = guide_legend(title = "CST"))
plot(PLOT_EXPRESSION)
topmir_plot_data
PLOT_EXPRESSION<-
ggplot(topmir_plot_data,aes(x=100*LACTO_PROP,y=value))+
stat_smooth(method = "lm",col='#FF5733',se=F)+ #
geom_abline(slope = slope,intercept = intersecpt)+
geom_point(aes(col=as.factor(CST)),size=3,show.legend = T)+
facet_wrap(~variable,scales = "free_y",nrow=2)+
ylab("Normalized Expression")+xlab("Lactobacillus spp. relative abundance (%)")+
journalFormat+
theme(text = element_text(size=20),axis.text.x = element_text(size=15))+
scale_x_continuous(breaks=seq(from = 0,to=100,by=20))+
scale_color_manual(values = cst.colors,guide = guide_legend(title = "CST"))
PLOT_EXPRESSION<-
ggplot(topmir_plot_data,aes(x=100*LACTO_PROP,y=value))+
stat_smooth(method = "lm",col='#FF5733',se=F)+ #
geom_point(aes(col=as.factor(CST)),size=3,show.legend = T)+
facet_wrap(~variable,scales = "free_y",nrow=2)+
ylab("Normalized Expression")+xlab("Lactobacillus spp. relative abundance (%)")+
journalFormat+
theme(text = element_text(size=20),axis.text.x = element_text(size=15))+
scale_x_continuous(breaks=seq(from = 0,to=100,by=20))+
geom_abline(slope = slope,intercept = intersecpt)+
scale_color_manual(values = cst.colors,guide = guide_legend(title = "CST"))
topmir_plot_data
PLOT_EXPRESSION<-
ggplot(topmir_plot_data,aes(x=100*LACTO_PROP,y=value))+
stat_smooth(method = "lm",col='#FF5733',se=F)+ #
geom_point(aes(col=as.factor(CST)),size=3,show.legend = T)+
facet_wrap(~variable,scales = "free_y",nrow=2)+
ylab("Normalized Expression")+xlab("Lactobacillus spp. relative abundance (%)")+
journalFormat+
theme(text = element_text(size=20),axis.text.x = element_text(size=15))+
scale_x_continuous(breaks=seq(from = 0,to=100,by=20))+
geom_abline(slope = slope,intercept = intersecpt)+
scale_color_manual(values = cst.colors,guide = guide_legend(title = "CST"))
PLOT_EXPRESSION<-
ggplot(topmir_plot_data,aes(x=100*LACTO_PROP,y=value))+
stat_smooth(method = "lm",col='#FF5733',se=F)+ #
geom_point(aes(col=as.factor(CST)),size=3,show.legend = T)+
facet_wrap(~variable,scales = "free_y",nrow=2)+
ylab("Normalized Expression")+xlab("Lactobacillus spp. relative abundance (%)")+
journalFormat+
theme(text = element_text(size=20),axis.text.x = element_text(size=15))+
scale_x_continuous(breaks=seq(from = 0,to=100,by=20))+
geom_abline(aes(slope = slope,intercept = intersecpt))+
scale_color_manual(values = cst.colors,guide = guide_legend(title = "CST"))
plot(PLOT_EXPRESSION)
PLOT_EXPRESSION<-
ggplot(topmir_plot_data,aes(x=100*LACTO_PROP,y=value))+
stat_smooth(method = "lm",col='#FF5733',se=F)+ #
geom_point(aes(col=as.factor(CST)),size=3,show.legend = T)+
facet_wrap(~variable,scales = "free_y",nrow=2)+
ylab("Normalized Expression")+xlab("Lactobacillus spp. relative abundance (%)")+
journalFormat+
theme(text = element_text(size=20),axis.text.x = element_text(size=15))+
scale_x_continuous(breaks=seq(from = 0,to=100,by=20))+
geom_abline(slope = topmir_plot_data$slope,intercept = topmir_plot_data$intersecpt)+
scale_color_manual(values = cst.colors,guide = guide_legend(title = "CST"))
plot(PLOT_EXPRESSION)
lm_input
PLOT_EXPRESSION<-
ggplot(topmir_plot_data,aes(x=LACTO_PROP,y=value))+
stat_smooth(method = "lm",col='#FF5733',se=F)+ #
geom_point(aes(col=as.factor(CST)),size=3,show.legend = T)+
facet_wrap(~variable,scales = "free_y",nrow=2)+
ylab("Normalized Expression")+xlab("Lactobacillus spp. relative abundance (%)")+
journalFormat+
theme(text = element_text(size=20),axis.text.x = element_text(size=15))+
scale_x_continuous(breaks=seq(from = 0,to=100,by=20))+
geom_abline(slope = topmir_plot_data$slope,intercept = topmir_plot_data$intersecpt)+
scale_color_manual(values = cst.colors,guide = guide_legend(title = "CST"))
plot(PLOT_EXPRESSION)
PLOT_EXPRESSION<-
ggplot(topmir_plot_data,aes(x=LACTO_PROP,y=value))+
stat_smooth(method = "lm",col='#FF5733',se=F)+ #
geom_point(aes(col=as.factor(CST)),size=3,show.legend = T)+
facet_wrap(~variable,scales = "free_y",nrow=2)+
ylab("Normalized Expression")+xlab("Lactobacillus spp. relative abundance (%)")+
journalFormat+
theme(text = element_text(size=20),axis.text.x = element_text(size=15))+
scale_x_continuous(breaks=seq(from = 0,to=1,by=2))+
geom_abline(slope = topmir_plot_data$slope,intercept = topmir_plot_data$intersecpt)+
scale_color_manual(values = cst.colors,guide = guide_legend(title = "CST"))
plot(PLOT_EXPRESSION)
topmir_plot_data$slope
fitness<-lm_input %>%
select(-LACTO_PROP) %>%
names() %>%
paste0('`', .,'`LACTO_PROP ') %>%
map(~lm(as.formula(.x), data = lm_input))
lm_input %>%
select(-LACTO_PROP) %>%
names() %>%
paste0('`', .,'~`LACTO_PROP')
fitness<-lm_input %>%
select(-LACTO_PROP) %>%
names() %>%
paste0('`', .,'~`LACTO_PROP') %>%
map(~lm(as.formula(.x), data = lm_input))
fitness<-lm_input %>%
select(-LACTO_PROP) %>%
names() %>%
paste0('`', .,'`~ LACTO_PROP') %>%
map(~lm(as.formula(.x), data = lm_input))
fitness.r2<-data.frame(slope=unlist(lapply(fitness,FUN = function(x) x[[1]][2])),
intersecpt=unlist(lapply(fitness,FUN = function(x) x[[1]][1])),
adj.r.squared=unlist(lapply(fitness,FUN = function(x) round(summary(x)$adj.r.squared,digits = 3))))
fitness.r2$variable<-gsub(row.names(fitness.r2),pattern = "`",replacement = "")
fitness.r2
print(fitness.r2[order(abs(fitness.r2$slope),decreasing = T),])
lm_input<-model_input[,names(model_input) %in% c(as.character(unique(topmir_plot_data$variable)),"LACTO_PROP")]
fitness<-lm_input %>%
select(-LACTO_PROP) %>%
names() %>%
paste0('`', .,'`~ LACTO_PROP') %>%
map(~lm(as.formula(.x), data = lm_input))
fitness.r2<-data.frame(slope=unlist(lapply(fitness,FUN = function(x) x[[1]][2])),
intersecpt=unlist(lapply(fitness,FUN = function(x) x[[1]][1])),
adj.r.squared=unlist(lapply(fitness,FUN = function(x) round(summary(x)$adj.r.squared,digits = 3))))
fitness.r2
row.names(fitness.r2)
fitness
fitness
lm_input %>%
select(-LACTO_PROP) %>%
names() %>%
paste0('`', .,'`~ LACTO_PROP')
fitness<-lm_input %>%
select(-LACTO_PROP) %>%
names() %>%
paste0('LACTO_PROP ~ `', .,'`') %>%
map(~lm(as.formula(.x), data = lm_input))
fitness.r2<-data.frame(slope=unlist(lapply(fitness,FUN = function(x) x[[1]][2])),
intersecpt=unlist(lapply(fitness,FUN = function(x) x[[1]][1])),
adj.r.squared=unlist(lapply(fitness,FUN = function(x) round(summary(x)$adj.r.squared,digits = 3))))
fitness.r2$variable<-gsub(row.names(fitness.r2),pattern = "`",replacement = "")
fitness.r2
1/fitness.r2$slope
fitness.r2$intersecpt/fitness.r2$slope
-fitness.r2$intersecpt/fitness.r2$slope
fitness.r2
1/fitness.r2$slope
-fitness.r2$intersecpt/fitness.r2$slope
fitness<-lm_input %>%
select(-LACTO_PROP) %>%
names() %>%
paste0('`', .,'` ~LACTO_PROP) %>%
map(~lm(as.formula(.x), data = lm_input))
fitness.r2<-data.frame(slope=unlist(lapply(fitness,FUN = function(x) x[[1]][2])),
intersecpt=unlist(lapply(fitness,FUN = function(x) x[[1]][1])),
adj.r.squared=unlist(lapply(fitness,FUN = function(x) round(summary(x)$adj.r.squared,digits = 3))))
fitness.r2$variable<-gsub(row.names(fitness.r2),pattern = "`",replacement = "")
1/fitness.r2$slope
-fitness.r2$intersecpt/fitness.r2$slope
#fitness<-apply(model_input[,names(model_input) %in% unique(topmir_plot_data$variable)],MARGIN = 2,function(s) summary(lm(model_input,LACTO_PROP~s)))
#fitness.r2<-data.frame(adjr2=unlist(lapply(fitness,function(x) round(x$adj.r.squared,digits = 3))))
print(fitness.r2[order(abs(fitness.r2$slope),decreasing = T),])
topmir_plot_data<-join(topmir_plot_data,fitness.r2)
topmir_plot_data$variable<-factor(x=topmir_plot_data$variable,levels = unique(topmir_plot_data[order(abs(topmir_plot_data$adj.r.squared),decreasing = T),c("variable")]),ordered = T)
## Liner correlation coeff for miRNA expression data:
paste(apply(unique(dplyr::select(topmir_plot_data,c(variable,adj.r.squared))) %>% dplyr::arrange(rev(adj.r.squared)),MARGIN = 1,FUN = function(x) paste(sep =":" ,x[1],x[2])),sep=",")
paste(apply(unique(dplyr::select(topmir_plot_data,c(variable,slope))) %>% dplyr::arrange(rev(slope)),MARGIN = 1,FUN = function(x) paste(sep =":" ,x[1],x[2])),sep=",")
## Collapse CSTs to a single CST super type
topmir_plot_data[topmir_plot_data$CST %in% c("III-A","III-B"),"CST"]<-"III"
topmir_plot_data[topmir_plot_data$CST %in% c("I-A","I-B"),"CST"]<-"I"
##FIXME make sure NA samples weren't use in RF-- samples without a lacto prop.
## Plot the miRNA expression figure
PLOT_EXPRESSION<-
ggplot(topmir_plot_data,aes(x=LACTO_PROP,y=value))+
stat_smooth(method = "lm",col='#FF5733',se=F)+ #
geom_point(aes(col=as.factor(CST)),size=3,show.legend = T)+
facet_wrap(~variable,scales = "free_y",nrow=2)+
ylab("Normalized Expression")+xlab("Lactobacillus spp. relative abundance (%)")+
journalFormat+
theme(text = element_text(size=20),axis.text.x = element_text(size=15))+
scale_x_continuous(breaks=seq(from = 0,to=1,by=2))+
geom_abline(slope = topmir_plot_data$slope,intercept = topmir_plot_data$intersecpt)+
scale_color_manual(values = cst.colors,guide = guide_legend(title = "CST"))
cairo_ps(paste0(thesis_figures_directory,FIGURE_TOPMIRS),width = 16,height = 8) #
plot(PLOT_EXPRESSION)
dev.off()
#library(Boruta)
#postscript(paste0(R_script_output_directory,"Boruta_optimization.ps"))
#Lacto_RF.Boruta<-Boruta(x=dplyr::select(model_input_Lactobacillus,-c(SID,LACTO_PROP)),y=model_input_Lactobacillus$LACTO_PROP)
#plot(Lacto_RF.Boruta,main="Nugent-RF Boruta unimportant feature removal")
#Lacto_RF.Boruta$finalDecision[Lacto_RF.Boruta$finalDecision=="Confirmed"]
#dev.off()
```
fitness<-lm_input %>%
select(-LACTO_PROP) %>%
names() %>%
paste0('`', .,'` ~LACTO_PROP') %>%
map(~lm(as.formula(.x), data = lm_input))
fitness
fitness.r2<-data.frame(slope=unlist(lapply(fitness,FUN = function(x) x[[1]][2])),
intersecpt=unlist(lapply(fitness,FUN = function(x) x[[1]][1])),
adj.r.squared=unlist(lapply(fitness,FUN = function(x) round(summary(x)$adj.r.squared,digits = 3))))
fitness.r2$variable<-gsub(row.names(fitness.r2),pattern = "`",replacement = "")
fitness.r2
s<-1/fitness.r2$slope
y<--fitness.r2$intersecpt/fitness.r2$slope
fitness<-lm_input %>%
select(-LACTO_PROP) %>%
names() %>%
paste0('LACTO_PROP ~ `', .,'`') %>%
map(~lm(as.formula(.x), data = lm_input))
fitness.r2<-data.frame(slope=unlist(lapply(fitness,FUN = function(x) x[[1]][2])),
intersecpt=unlist(lapply(fitness,FUN = function(x) x[[1]][1])),
adj.r.squared=unlist(lapply(fitness,FUN = function(x) round(summary(x)$adj.r.squared,digits = 3))))
fitness.r2$variable<-gsub(row.names(fitness.r2),pattern = "`",replacement = "")
fitness.r2
s
y
fitness<-lm_input %>%
select(-LACTO_PROP) %>%
names() %>%
paste0('LACTO_PROP ~ `', .,'`') %>%
map(~lm(as.formula(.x), data = lm_input))
fitness.r2<-data.frame(slope=unlist(lapply(fitness,FUN = function(x) x[[1]][2])),
intersecpt=unlist(lapply(fitness,FUN = function(x) x[[1]][1])),
adj.r.squared=unlist(lapply(fitness,FUN = function(x) round(summary(x)$adj.r.squared,digits = 3))))
fitness.r2$variable<-gsub(row.names(fitness.r2),pattern = "`",replacement = "")
fitness.r2
fitness.r2$slope_xy<-1/fitness.r2$slope
fitness.r2$interscept_xy<--fitness.r2$intersecpt/fitness.r2$slope
print(fitness.r2[order(abs(fitness.r2$slope),decreasing = T),])
topmir_plot_data<-join(topmir_plot_data,fitness.r2)
topmir_plot_data$variable<-factor(x=topmir_plot_data$variable,levels = unique(topmir_plot_data[order(abs(topmir_plot_data$adj.r.squared),decreasing = T),c("variable")]),ordered = T)
paste(apply(unique(dplyr::select(topmir_plot_data,c(variable,adj.r.squared))) %>% dplyr::arrange(rev(adj.r.squared)),MARGIN = 1,FUN = function(x) paste(sep =":" ,x[1],x[2])),sep=",")
paste(apply(unique(dplyr::select(topmir_plot_data,c(variable,slope))) %>% dplyr::arrange(rev(slope)),MARGIN = 1,FUN = function(x) paste(sep =":" ,x[1],x[2])),sep=",")
paste(apply(unique(dplyr::select(topmir_plot_data,c(variable,slope_xy))) %>% dplyr::arrange(rev(slope_xy)),MARGIN = 1,FUN = function(x) paste(sep =":" ,x[1],x[2])),sep=",")
fitness
fitness.r2
paste(apply(unique(dplyr::select(topmir_plot_data,c(variable,slope_xy))) %>% dplyr::arrange(rev(slope_xy)),MARGIN = 1,FUN = function(x) paste(sep =":" ,x[1],x[2])),sep=",")
topmir_plot_data
topmir_plot_data[topmir_plot_data$CST %in% c("III-A","III-B"),"CST"]<-"III"
topmir_plot_data[topmir_plot_data$CST %in% c("I-A","I-B"),"CST"]<-"I"
PLOT_EXPRESSION<-
ggplot(topmir_plot_data,aes(x=LACTO_PROP,y=value))+
stat_smooth(method = "lm",col='#FF5733',se=F)+ #
geom_point(aes(col=as.factor(CST)),size=3,show.legend = T)+
facet_wrap(~variable,scales = "free_y",nrow=2)+
ylab("Normalized Expression")+xlab("Lactobacillus spp. relative abundance (%)")+
journalFormat+
theme(text = element_text(size=20),axis.text.x = element_text(size=15))+
scale_x_continuous(breaks=seq(from = 0,to=1,by=2))+
geom_abline(slope = topmir_plot_data$slope,intercept = topmir_plot_data$intersecpt)+
scale_color_manual(values = cst.colors,guide = guide_legend(title = "CST"))
plot(PLOT_EXPRESSION)
PLOT_EXPRESSION<-
ggplot(topmir_plot_data,aes(y=LACTO_PROP,x=value))+
stat_smooth(method = "lm",col='#FF5733',se=F)+ #
geom_point(aes(col=as.factor(CST)),size=3,show.legend = T)+
facet_wrap(~variable,scales = "free_y",nrow=2)+
ylab("Normalized Expression")+xlab("Lactobacillus spp. relative abundance (%)")+
journalFormat+
theme(text = element_text(size=20),axis.text.x = element_text(size=15))+
#scale_x_continuous(breaks=seq(from = 0,to=1,by=2))+
geom_abline(slope = topmir_plot_data$slope,intercept = topmir_plot_data$intersecpt)+
scale_color_manual(values = cst.colors,guide = guide_legend(title = "CST"))
plot(PLOT_EXPRESSION)
PLOT_EXPRESSION<-
ggplot(topmir_plot_data,aes(x=LACTO_PROP,y=value))+
stat_smooth(method = "lm",col='#FF5733',se=F)+ #
geom_point(aes(col=as.factor(CST)),size=3,show.legend = T)+
facet_wrap(~variable,scales = "free_y",nrow=2)+
ylab("Normalized Expression")+xlab("Lactobacillus spp. relative abundance (%)")+
journalFormat+
theme(text = element_text(size=20),axis.text.x = element_text(size=15))+
#scale_x_continuous(breaks=seq(from = 0,to=1,by=2))+
geom_abline(slope = topmir_plot_data$slope_xy,intercept = topmir_plot_data$interscept_xy)+
scale_color_manual(values = cst.colors,guide = guide_legend(title = "CST"))
plot(PLOT_EXPRESSION)
PLOT_EXPRESSION<-
ggplot(topmir_plot_data,aes(x=LACTO_PROP,y=value))+
stat_smooth(method = "lm",col='#FF5733',se=F)+ #
geom_point(aes(col=as.factor(CST)),size=3,show.legend = T)+
facet_wrap(~variable,scales = "free_y",nrow=2)+
ylab("Normalized Expression")+xlab("Lactobacillus spp. relative abundance (%)")+
journalFormat+
theme(text = element_text(size=20),axis.text.x = element_text(size=15))+
scale_x_continuous(breaks=seq(from = 0,to=100,by=20))+
scale_color_manual(values = cst.colors,guide = guide_legend(title = "CST"))
PLOT_EXPRESSION<-
ggplot(topmir_plot_data,aes(x=100*LACTO_PROP,y=value))+
stat_smooth(method = "lm",col='#FF5733',se=F)+ #
geom_point(aes(col=as.factor(CST)),size=3,show.legend = T)+
facet_wrap(~variable,scales = "free_y",nrow=2)+
ylab("Normalized Expression")+xlab("Lactobacillus spp. relative abundance (%)")+
journalFormat+
theme(text = element_text(size=20),axis.text.x = element_text(size=15))+
scale_x_continuous(breaks=seq(from = 0,to=100,by=20))+
scale_color_manual(values = cst.colors,guide = guide_legend(title = "CST"))
plot(PLOT_EXPRESSION)
print(fitness.r2[order(abs(fitness.r2$adj.r.squared),decreasing = T),])
