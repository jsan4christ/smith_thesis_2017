geom_hline(yintercept = c(3,7),size=rel(1),col="pink")+ ## Defines Nugent score 3 & 7 (BV
theme(axis.ticks = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(size = rel(1.5*sizes)),
legend.position="none",
plot.margin=margins,
panel.grid.major.y=element_line(colour = "grey73"),
panel.grid.minor.x  = element_blank())+
ylab("Nugent\nScore")+
scale_fill_manual(values=c('black','red'))+
scale_x_continuous(breaks=time_breaks,label=time_label,limits=time_limits)+
annotate("rect", xmin=rect_min, xmax=rect_max, ymin=0, ymax=10, alpha=alpha_rect, fill=rect_fill)+
scale_y_continuous(breaks=c(0,3,7,10),limits=c(-1.25,10.5))
### ///////////////////////////////////////////// ###
### /////////     Metadata Plot         ///////// ###
### ///////////////////////////////////////////// ###
metaPlot<-ggplot(dailyDiaryMetadata, aes(x=as.numeric(SERIAL)))+
geom_point(aes(y=1*(as.numeric(VAG_DIS)==1),size=2),
pch=16,col='blue',position = position_dodge(width=0.5))+
geom_point(aes(y=2*(as.numeric(VAG_ODOR)==1),size=2),
pch=16,col='blue',position = position_dodge(width=0.5))+
geom_point(aes(y=3*(as.numeric(MENSTRUATION)>0),size=as.numeric(MENSTRUATION)),
col='red',pch=16, position = position_dodge(width=0.5))+
scale_size(range = c(2+2,4+2))+ ## for menstru point sizes. Bounded by 3 points on a scale.
mBio+
theme(legend.position="none",
plot.title = element_text(size = rel(sizes)),
axis.text = element_text(size = rel(2*sizes)),
axis.title = element_text(size = rel(sizes)),
axis.title.y=element_text(vjust=.2),
axis.title.x=element_text(vjust=-.2),
axis.text.y=element_text(size=rel(0.75)), ## change back to 0.75
plot.margin=unit(c(-2.5,40,5,5),units="points"),
panel.grid.major.y=element_line(colour = "grey73"),
panel.grid.minor.x  = element_blank())+
xlab("Week")+
ylab("")+
annotate("rect", xmin=rect_min, xmax=rect_max, ymin=1, ymax=3, alpha=alpha_rect, fill=rect_fill)+
scale_x_continuous(breaks=time_breaks,label=time_label,limits=time_limits)+
scale_y_continuous(breaks=1:3,labels = c("Discharge",
"Odor",
"Menstruation"),limits=c(0.5,3.5))
###### Determine if subject has low qualiyt daily dairy flag and annotate plot:
if(!sum(is.na(dailyDiaryMetadata$Diary_QUALITY_FLAG))){
min<-min(timeTable$SERIAL,na.rm = T)
max<-max(timeTable$SERIAL,na.rm = T)
middle.x<-(max-min)/2
middle.y<<-(16-1)/2
metaPlot<-metaPlot + annotate("text", x = middle.x,
y = middle.y, label = "?",
size=rel(40),
col="grey")
}
### ///////////////////////////////////////////// ###
### /////////          pH Plot          ///////// ###
### ///////////////////////////////////////////// ###
ph_normalization_factor<-3.5
## Notice the pH value scale is "normalized" by subtracting "ph_normalization_factor" from the actual pH value, then re-labeling the y axis. This is very dangerous, but ggplot will not permit bar plots that start from > 0 .
ph[ph$PH==2,"PH"]<-ph_normalization_factor-0.5
phPlot<-ggplot(ph,aes(x=as.numeric(SERIAL),
y=as.numeric(PH)-ph_normalization_factor,width=.9,fill=color))+
geom_bar(stat="identity",position = position_dodge(width=0.5))+
scale_fill_manual(values=c('black','red'))+
mBio+
geom_hline(yintercept = c(4.5-ph_normalization_factor),
size=rel(1),col="pink")+ ## Vaginal pH>4.5 one criteria for BV.
theme(axis.ticks = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_blank(),
axis.text = element_text(size = rel(1.5*sizes)),
legend.position="none",
plot.margin=margins,
panel.grid.major.y=element_line(colour = "grey73"),
panel.grid.minor.x  = element_blank())+
ylab("pH")+
annotate("rect", xmin=rect_min, xmax=rect_max, ymin=min(0,min(ph$PH,na.rm = T)-ph_normalization_factor-0.25), ymax= max(ph$PH,na.rm = T)+0.25-ph_normalization_factor, alpha=alpha_rect, fill=rect_fill)+
scale_x_continuous(breaks=time_breaks,label=time_label,limits=time_limits)+
scale_y_continuous(breaks=c(4,4.5,5,5.5)-ph_normalization_factor, limits=c(-0.75,5.8+0.25-ph_normalization_factor),labels=c("4","4.5","5","5.5"))
### ///////////////////////////////////////////// ###
### /////////    Tie Plots Together     ///////// ###
### ///////////////////////////////////////////// ###
## ////////////////////////// ##
## //Define plots as Grobs/// ##
## ////////////////////////// ##
grob.otuPlot <- ggplotGrob(otuPlot)
grob.nugentPlot <- ggplotGrob(nugentPlot)
grob.phPlot<-ggplotGrob(phPlot)
grob.metaPlot <- ggplotGrob(metaPlot)
## ////////////////////////// ##
## ///   Find max width   /// ##
## ////////////////////////// ##
maxWidth = grid::unit.pmax(grob.otuPlot$widths[1:6],
grob.nugentPlot$widths[1:5],
grob.phPlot$widths[1:5],
grob.metaPlot$widths[1:5])
## ////////////////////////// ##
## /Redefine common max width ##
## ////////////////////////// ##
grob.nugentPlot$widths[1:6] <- as.list(maxWidth)
grob.otuPlot$widths[1:6] <- as.list(maxWidth)
grob.metaPlot$widths[1:6] <- as.list(maxWidth)
grob.phPlot$widths[1:6]<-as.list(maxWidth)
### ///////////////////////////////////////////// ###
### /////////      Write/Draw Plot     ///////// ###
### ///////////////////////////////////////////// ###
cairo_ps(paste0(thesis_figures_directory,FIGURE_SUBJECT_PLOTS,s,".eps"),width = 11,height = 8.5)
grid.arrange(grob.otuPlot,
grob.nugentPlot,
grob.phPlot,
grob.metaPlot,
ncol=1,nrow=4,
heights=c(2.5,1,1,1))
dev.off()
}
## //////
## The following plots the figure legend containing colors for all taxa plotted in for loos
dummy_globalSpeciesList<-data.frame(SERIAL=1,species=global_species_list,count=1)
dummy_globalSpeciesList_plot<-ggplot(dummy_globalSpeciesList)+
geom_area(aes(x=SERIAL,y=count,fill=species,order=order(as.numeric(as.factor(dummy_globalSpeciesList$species)),decreasing = F)),
stat="identity",show.legend=T,position="fill")+#,width=1)+
mBio+
theme(axis.ticks = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_blank(),
legend.key.size=unit(8, "points"),
legend.title = element_blank(),
legend.text = element_text(size = rel(.5),face="italic"),
axis.title = element_text(size = rel(sizes)),
plot.margin=unit(c(2.5,40,2.5,10),units="points"),#margins
panel.grid.major.y=element_line(colour = "grey73"))+
scale_fill_manual(values=subject_long_taxa_colors)+
ggtitle("Global Species List Color Codes")
##Write legend to file
cairo_ps(paste0(thesis_figures_directory,FIGURE_SUBJECT_PLOTS,"GlobalSpeciesList.eps"),width = 11,height = 8.5)
dummy_globalSpeciesList_plot
dev.off()
# Chunk 17: RNA_quality_quant
## RIN Quality Distribition
TRL_RNA_Sample_QuantQual<-read.csv(paste0(R_script_input_directory,"TRL_RNA_Sample_Quality.csv"),header = F)
#postscript(paste0(thesis_figures_directory,FIGURE_TRL_RIN_HIST))
p<-ggplot(TRL_RNA_Sample_QuantQual,aes(x=V1))+geom_histogram()+xlab("RINe")+ylab("Number of Samples")+geom_vline(xintercept = median(TRL_RNA_Sample_QuantQual$V1),col='red')+mBio
plot(p)
dev.off()
plot(p)
summary(TRL_RNA_Sample_QuantQual$V1)
summary(10*TRL_RNA_Sample_QuantQual[TRL_RNA_Sample_QuantQual$V1!=3.1,"V2"])
# Chunk 19: create_tables
TRL_counts_table<-read.csv(file=paste0(R_script_output_directory,TABLE_TRL_COUNTS_RAW),row.names = 1)
write.csv(TRL_counts_table,file=paste0(thesis_tables_directory,TABLE_TRL_COUNTS_RAW),row.names = T,quote=F)
## Filter out ambiguous, no feature reads. Make note of how many there are
TRL_counts_table[row.names(TRL_counts_table) %in% c("alignment_not_unique","no_feature","ambiguous"),]
## Percentage of ambiguous/no feature/non unique reads & alignment stats
(ambig_nofeat<-colSums(TRL_counts_table[row.names(TRL_counts_table) %in% c("alignment_not_unique","no_feature","ambiguous"),]))
(aligned<-colSums(TRL_counts_table[!row.names(TRL_counts_table) %in% c("alignment_not_unique","no_feature","ambiguous"),]))
alignment_stats<-data.frame(aligne=aligned,non_aligned=ambig_nofeat,aligned.percent=100*aligned/colSums(TRL_counts_table))
write.csv(alignment_stats,file = paste0(thesis_tables_directory,TABLE_TRL_ALIGNSTATS))
## Look at proportion of Ambigous/no feature/non-unique
hist(alignment_stats$aligned.percent,main="Percentage of Aligned reads",xlab="Percentage of total trimmed reads",ylab="Proportion")
ambig_nofeat_readpercent.high<-alignment_stats[(100-alignment_stats$aligned.percent)>80,]
paste0("The following samples have ambigous reads >80%: ", str_c(row.names(ambig_nofeat_readpercent.high),collapse = ", "))
#Filter out ambigous reads from counts
TRL_counts_table<-TRL_counts_table[!row.names(TRL_counts_table) %in% c("alignment_not_unique","no_feature","ambiguous"),]
TRL_counts_table<-TRL_counts_table[,order(names(TRL_counts_table))]
hist(log(as.matrix(TRL_counts_table)),main="log10 read counts, all samples",xlab="Log10 read count")
##Create Design Table
TRL_design<-data.frame(Sample=names(TRL_counts_table))
row.names(TRL_design)<-TRL_design$Sample
TRL_design<-separate(TRL_design,Sample,sep = "_",into = c("CellLine","BCS","DROP","ExposureTime","rep")) %>% dplyr::select(-c(CellLine,DROP))
## Create replicate #, lactobacillus indicator. Then combine BCS and exposure time for 'group1' for eventually creating constrasts
TRL_design$rep<-as.numeric(gsub(TRL_design$rep,pattern = "rep",replacement = ""))
TRL_design$Lactobacillus<-grepl(TRL_design$BCS,pattern = "^L")
TRL_design$group1 <- factor(paste(TRL_design$BCS,TRL_design$ExposureTime,sep="."))
TRL_design$BCS<-factor(TRL_design$BCS,levels = c("LCRISPATUS","LJENSENII","LINERS","GVAGINALIS","MEDIA"),ordered = T)
TRL_design$ExposureTime<-factor(TRL_design$ExposureTime,levels = c("4HR","13HR","22HR"),ordered=T)
sample_order<-with(TRL_design,order(ExposureTime,BCS,rep))
##Make an expression set object for coupled handling of coutns and design matrix
TRL_design<-TRL_design[sample_order,]
TRL_counts_table<-TRL_counts_table[,sample_order]
TRL_counts_meta<-ExpressionSet(assayData = as.matrix(TRL_counts_table),phenoData  = AnnotatedDataFrame(TRL_design))
# Chunk 21: drop_samples
dropped_TRL_samples<-c("VK2_MEDIA_BCS_4HR_rep3","VK2_LCRISPATUS_BCS_13HR_rep3") ## determined from replciate plots and # of ambigous (rRNA) reads.
##Drop poor QC samples
TRL_counts_meta.qc<-subset_ExpressionSet(TRL_counts_meta,filterOut =dropped_TRL_samples )
## Proportion of genes with at least 1 read across all samples
sum(rowSums(exprs(TRL_counts_meta.qc)>0)>0)/nrow(exprs(TRL_counts_meta.qc))
#exprs(TRL_counts_meta.qc)[rowSums(exprs(TRL_counts_meta.qc)>0)>0,]
##Summary of # of samples with at least one read across all samples
summary(rowSums(exprs(TRL_counts_meta.qc)[rowSums(exprs(TRL_counts_meta.qc)>0)>0,]>0))
##Total post QC samples:
ncol(exprs(TRL_counts_meta.qc))
## Summary of remaining total read counts
summary(colSums(exprs(TRL_counts_meta.qc)))
(reps_per_treatment<-ddply(data.frame(pData(TRL_counts_meta.qc)),c("BCS","ExposureTime"),summarise,n=length(BCS)))
# Chunk 22
## take counts table design created above and make edgeR object
design <-model.matrix(~0+group1,data = pData(TRL_counts_meta.qc))
# Chunk 24: perform_LRT
load(paste0(R_script_output_directory,"TRL_glmFit.RData"))
## Go through each pait-wise comparison in constarsts and compute differential expression using glmLRT
contr<-makeContrasts(
LCGV.4="group1LCRISPATUS.4HR-group1GVAGINALIS.4HR",
LCM.4="group1LCRISPATUS.4HR-group1MEDIA.4HR",
LJGV.4="group1LJENSENII.4HR-group1GVAGINALIS.4HR",
LJM.4="group1LJENSENII.4HR-group1MEDIA.4HR",
LIGV.4="group1LINERS.4HR-group1GVAGINALIS.4HR",
LIM.4="group1LINERS.4HR-group1MEDIA.4HR",
LCLJ.4="group1LCRISPATUS.4HR-group1LJENSENII.4HR",
LCLI.4="group1LCRISPATUS.4HR-group1LINERS.4HR",
LJLI.4="group1LJENSENII.4HR-group1LINERS.4HR",
GVM.4="group1GVAGINALIS.4HR-group1MEDIA.4HR",
LCGV.13="group1LCRISPATUS.13HR-group1GVAGINALIS.13HR",
LCM.13="group1LCRISPATUS.13HR-group1MEDIA.13HR",
LJGV.13="group1LJENSENII.13HR-group1GVAGINALIS.13HR",
LJM.13="group1LJENSENII.13HR-group1MEDIA.13HR",
LIGV.13="group1LINERS.13HR-group1GVAGINALIS.13HR",
LIM.13="group1LINERS.13HR-group1MEDIA.13HR",
LCLJ.13="group1LCRISPATUS.13HR-group1LJENSENII.13HR",
LCLI.13="group1LCRISPATUS.13HR-group1LINERS.13HR",
LJLI.13="group1LJENSENII.13HR-group1LINERS.13HR",
GVM.13="group1GVAGINALIS.13HR-group1MEDIA.13HR",
LCGV.22="group1LCRISPATUS.22HR-group1GVAGINALIS.22HR",
LCM.22="group1LCRISPATUS.22HR-group1MEDIA.22HR",
LJGV.22="group1LJENSENII.22HR-group1GVAGINALIS.22HR",
LJM.22="group1LJENSENII.22HR-group1MEDIA.22HR",
LIGV.22="group1LINERS.22HR-group1GVAGINALIS.22HR",
LIM.22="group1LINERS.22HR-group1MEDIA.22HR",
LCLJ.22="group1LCRISPATUS.22HR-group1LJENSENII.22HR",
LCLI.22="group1LCRISPATUS.22HR-group1LINERS.22HR",
LJLI.22="group1LJENSENII.22HR-group1LINERS.22HR",
GVM.22="group1GVAGINALIS.22HR-group1MEDIA.22HR",
levels=design
)
desets<-list()
comparisons<-names(data.frame(contr))
#postscript(paste0(R_script_output_directory,"TRL_SmearPlots.eps"),height = 8,width = 10)
for(comparison in comparisons){
#comparison<-"LCGV.13"
comp<-glmLRT(TRL_glmFit,contrast = contr[,comparison]) ## DE using constrast
de.table<-comp$table[abs(comp$table$logFC)>1 & comp$table$logCPM>1 & p.adjust(comp$table$PValue,method = "fdr")<=0.01,]
comp$table$PValue.adj<-p.adjust(comp$table$PValue,method = "fdr")
desets[[comparison]]<-list(detags=nrow(de.table),fulltable=comp$table)
#plotSmear(comp,de.tags = names(de.table),main=paste0(comparison,": ",length(detags)," DE genes"))
}
# Chunk 25: IPA
##Timecourse files are from IPA- contain pathway list and activation z values.
pathway_zscore_files<-list.files(path = R_script_input_directory, pattern = "timecourse.txt")
pathway_zscores<-data.frame(Canonical.Pathway="DROP")
functions<-data.frame(Comparison="DROP",Categories="DROP",Diseases.or.Functions.Annotation="DROP",p.Value=1,Predicted.Activation.State="DROP",Activation.z.score=0,Flags="DROP", Molecules="DROP")
for(tab in pathway_zscore_files){
#tab<-"LCGV_LCM_timecourse.txt"
newt<-  read.table(paste0(R_script_input_directory,tab),header = T,sep = "\t",skip = 1,na.strings = "N/A",stringsAsFactors = F) %>% dplyr::select(-X)
pathway_zscores<-merge(newt,pathway_zscores,all = T)
}
## Put pathway z scores into matricies and then split absed on G. vag or medium reference
pathway_zscores.matrix<-as.matrix(pathway_zscores[,2:ncol(pathway_zscores)])
row.names(pathway_zscores.matrix)<-pathway_zscores$Canonical.Pathway
pathway_zscores.matrix<-pathway_zscores.matrix[rowSums(abs(pathway_zscores.matrix),na.rm = T)>0,colSums(abs(pathway_zscores.matrix),na.rm = T)>0]
pathway_zscores.melt<-melt(pathway_zscores,id.vars = "Canonical.Pathway")
row.names(pathway_zscores)<-pathway_zscores$Canonical.Pathway
pathway_zscores.matrix[is.na(pathway_zscores.matrix)]<-0
## Create a design table for the pathways
Pathways_design<-data.frame(comparison=names(data.frame(pathway_zscores.matrix)))
Pathways_design$comp<-sapply(strsplit(as.character(Pathways_design$comparison),"\\."),function(x) x[[1]])
Pathways_design$ExposureTime<-sapply(strsplit(as.character(Pathways_design$comparison),"\\."),function(x) x[[2]])
Pathways_design$L<-sapply(strsplit(Pathways_design$comp,split = "*"),function(x) paste0(x[[1]],x[[2]]))
Pathways_design$ref<-sapply(strsplit(Pathways_design$comp,split = "*"),function(x) paste0(x[[3]]))
row.names(Pathways_design)<-Pathways_design$comparison
## Map mapthway names to classifications
path_type_map<-read.csv(paste0(R_script_input_directory,"Pathway_classification.csv"),stringsAsFactors = F)
## Subset to look at only cell culture medium references
medium_comparisons<-names(data.frame(pathway_zscores.matrix))[grepl(names(data.frame(pathway_zscores.matrix)),pattern = "M")]
pathway_zscores.matrix.medium<-pathway_zscores.matrix[,names(data.frame(pathway_zscores.matrix)) %in% medium_comparisons]
## Summary table for pathway classification
summary_pathways<-cbind(data.frame(num_cycle.p=colSums(pathway_zscores.matrix.medium[row.names(data.frame(pathway_zscores.matrix.medium)) %in% path_type_map[path_type_map$class=="c","pathway"],]>2)),
data.frame(num_cycle.n=colSums(pathway_zscores.matrix.medium[row.names(data.frame(pathway_zscores.matrix.medium)) %in% path_type_map[path_type_map$class=="c","pathway"],]<(-2))),
data.frame(num_immune.p=colSums(pathway_zscores.matrix.medium[row.names(data.frame(pathway_zscores.matrix.medium)) %in% path_type_map[path_type_map$class=="i","pathway"],]>2)),
data.frame(num_immune.n=colSums(pathway_zscores.matrix.medium[row.names(data.frame(pathway_zscores.matrix.medium)) %in% path_type_map[path_type_map$class=="i","pathway"],]<(-2))),
data.frame(num_immune_pro.n=colSums(pathway_zscores.matrix.medium[row.names(data.frame(pathway_zscores.matrix.medium)) %in% path_type_map[path_type_map$X=="pro","pathway"],]<(-2))),
data.frame(num_immune_pro.p=colSums(pathway_zscores.matrix.medium[row.names(data.frame(pathway_zscores.matrix.medium)) %in% path_type_map[path_type_map$X=="pro","pathway"],]>2)))
summary_pathways$comparison<-row.names(summary_pathways)
summary_pathways<-merge(summary_pathways,Pathways_design)
## Write table summarizing the number of pathways above or below z score, grouped by pathway category
write.csv(summary_pathways,paste0(thesis_tables_directory,TABLE_TRL_SUMMARY_PATHWAYS),row.names=F,quote=F)
write.csv(pathway_zscores.matrix.medium,paste0(thesis_tables_directory,TABLE_TRL_PATHWAY_Z_SCORES),row.names=T,quote=F)
##Sort # of z>2 pathways by negative cycle, positive immune and negative immune
summary_pathways[order(summary_pathways$num_cycle.n,decreasing = T),]
summary_pathways[order(summary_pathways$num_immune.p,decreasing = T),]
summary_pathways[order(summary_pathways$num_immune.n,decreasing = T),]
## Use pathways that are expressed abs(z-score)>2 in 10% of comparisons
pathway_zscores.matrix.medium<-pathway_zscores.matrix.medium[(rowSums(abs(pathway_zscores.matrix.medium)>2))>=.1*ncol(pathway_zscores.matrix.medium),]
## Clean up some of the pathway names in pathway map
path_type_map[path_type_map$pathway=="NF-_B Signaling","pathway"]<-"NF-κB Signaling"
path_type_map[path_type_map$pathway=="PKC_ Signaling in T Lymphocytes","pathway"]<-"PKCθ Signaling in T Lymphocytes"
path_type_map[path_type_map$X=="pro","class"]<-"pro"
## Add in pathway classification based on mapping file
pathway_zscores.matrix.medium<-data.frame(pathway_zscores.matrix.medium)
pathway_zscores.matrix.medium$pathway<-row.names(pathway_zscores.matrix.medium)
pathway_zscores.matrix.medium<-merge(pathway_zscores.matrix.medium,path_type_map) ## maps classifications to pathway names
row.names(pathway_zscores.matrix.medium)<-pathway_zscores.matrix.medium$pathway
table(path_type_map[path_type_map$pathway %in% row.names(data.frame(pathway_zscores.matrix.medium)),"class"])
## Melt the pathway z-scores table
pathway_zscores.medium.melt<-melt(pathway_zscores.matrix.medium,id.vars = c("class","X","pathway"))
pathway_zscores.medium.melt<-dplyr::rename(pathway_zscores.medium.melt,"comparison"=variable)
pathway_zscores.medium.melt<-merge(pathway_zscores.medium.melt,Pathways_design)
## Ensure the exposure times and BCS are ordered
summary_pathways$ExposureTime<-as.numeric(summary_pathways$ExposureTime)
summary_pathways$ExposureTime<-factor(summary_pathways$ExposureTime,levels = c(4,13,22),ordered = T)
pathway_zscores.medium.melt$comp<-factor(pathway_zscores.medium.melt$comp,levels = c("LCM","LJM","LIM","GVM"),ordered = T)
pathway_zscores.medium.melt$ExposureTime<-factor(pathway_zscores.medium.melt$ExposureTime,levels = c("4","13","22"),ordered = T)
pathway_zscores.medium.melt$x<-paste(pathway_zscores.medium.melt$comp,pathway_zscores.medium.melt$pathway)
##Clean up the pathway names for better plotting
#pathway_zscores.medium.melt[pathway_zscores.medium.melt$pathway=="Role of IL-17F in Allergic Inflammatory Airway Diseases","pathway"]<-"IL-17F in Allgc. Inflam. Arwy Dis."
#pathway_zscores.medium.melt[pathway_zscores.medium.melt$pathway=="Role of Pattern Recognition Receptors in Recognition of Bacteria and Viruses","pathway"]<-"PRRs/ Bacteria and Viruses"
#pathway_zscores.medium.melt[pathway_zscores.medium.melt$pathway=="Production of Nitric Oxide and Reactive Oxygen Species in Macrophages","pathway"]<-"Production of NO and ROS in Macrophages"
#pathway_zscores.medium.melt[pathway_zscores.medium.melt$pathway=="PKCθ Signaling in T Lymphocytes","pathway"]<-"PKCθ Signaling"
#pathway_zscores.medium.melt[pathway_zscores.medium.melt$pathway=="PI3K Signaling in B Lymphocytes","pathway"]<-"PI3K Signaling"
##Subset z-scores table by cell cycle pathways
pathway_zscores.medium.melt.cycle<-dplyr::filter(pathway_zscores.medium.melt,class %in% c("c"))
unique(dplyr::select(pathway_zscores.medium.melt,c(class,pathway)))
paste0("Number of pathways belonging to each class:")
table(unique(dplyr::select(pathway_zscores.medium.melt,c(class,pathway))) %>% dplyr::select(class))
paste0(c("the remaining 5 pathways did not belong to either cell cycle or immunity:",str_c(unique(dplyr::select(pathway_zscores.medium.melt,c(class,pathway))) %>% dplyr::filter(class=="o") %>% dplyr::select(pathway),collapse = ", ")))
ggplot(pathway_zscores.medium.melt.immune)+geom_tile(aes(x=ExposureTime,y=pathway,fill=value))+
scale_fill_gradient2(high="red",mid="white",low="blue",
na.value="yellow", midpoint=0)+facet_wrap(~comp,nrow=1)+
#mBio+
theme_bw() + theme(text = element_text(colour = "black",size=12))
#theme(text = element_text(size=12),plot.margin = unit(c(0,30,0,30),units = "pt"))
dev.off()
cairo_ps(paste0(thesis_figures_directory,FIGURE_COMBINED_PATHWAYS_CYCLE,".eps"),width=10,height=8)
ggplot(pathway_zscores.medium.melt.cycle)+geom_tile(aes(x=ExposureTime,y=pathway,fill=value))+
scale_fill_gradient2(high="red",mid="white",low="blue",
na.value="yellow", midpoint=0)+facet_wrap(~comp,nrow=1)+
mBio+
theme(text = element_text(size=12),plot.margin = unit(c(0,30,0,0),units = "pt"))
dev.off()
# Chunk 26: plot_FC
## Pull out DE tables from each comparison within list, and write this table to file
edgeR_results<-data.frame(gene=row.names(exprs(TRL_counts_meta.qc)))
row.names(edgeR_results)<-edgeR_results$gene
num_de_genes<-data.frame(num_de_genes=sapply(desets,function(x) x[[1]]))
num_de_genes$comparison<-row.names(num_de_genes)
write.csv(num_de_genes[num_de_genes$comparison %in% medium_comparisons,],file=paste0(m=thesis_tables_directory,TABLE_TRL_NUMDEGENES))
##Exctract genes from the list
for(i in names(desets)){
#i<-"LCGV.4"
tmp.df<-data.frame(desets[[i]]$fulltable)
names(tmp.df)<-paste0(i,".",names(tmp.df))
tmp.df$gene<-row.names(desets[[i]]$fulltable)
edgeR_results<-join(edgeR_results,tmp.df,"gene")
}
hist(as.matrix(dplyr::select(edgeR_results,ends_with("logFC"))))
hist(as.matrix(dplyr::select(edgeR_results,ends_with("logCPM"))))
quantile(as.matrix(dplyr::select(edgeR_results,ends_with("logFC"))),probs = c(0.68,0.95))
edgeR_results[1:5,1:6]
row.names(edgeR_results)<-edgeR_results$gene
dplyr::select(edgeR_results[edgeR_results$gene %in% c("EGFR","EP300","HDAC4","CDKN1A"),],contains("M")) %>% dplyr::select(contains("PValue.adj"))
write.csv(edgeR_results,paste0(thesis_tables_directory,TABLE_EDGER_RESULTS),quote = F,row.names = F)
#write.table(edgeR_results,paste0(thesis_tables_directory,"TABLE_A11.txt"),quote = F,row.names = F,sep="\t")
#write.csv(dplyr::select(edgeR_results,c(gene,ends_with("logFC"),ends_with("PValue"))),paste0(root_directory,"edgeR_results_LCPval.csv"),quote = F,row.names = F)
## Clean up the table containg the DE expresison information
edgeR_results.melt<-melt(edgeR_results)
edgeR_results.melt$variable<-gsub(pattern = "PValue.adj",replacement = "Pvalue_adj",x = edgeR_results.melt$variable)
edgeR_results.melt<-separate(edgeR_results.melt,"variable",sep="\\.",into = c("comparison","ExposureTime","value_type"))
## Assign colors to BCS
color_map<-c("LCGV"=unname(subject_long_taxa_colors["Lactobacillus_crispatus"]),"LCM"=unname(subject_long_taxa_colors["Lactobacillus_crispatus"]),"LJGV"=unname(subject_long_taxa_colors["Lactobacillus_jensenii"]),"LJM"=unname(subject_long_taxa_colors["Lactobacillus_jensenii"]),"LIM"=unname(subject_long_taxa_colors["Lactobacillus_iners"]),"LIGV"=unname(subject_long_taxa_colors["Lactobacillus_iners"]),"GVM"=unname(subject_long_taxa_colors["Gardnerella_vaginalis"]))
## Use different line types for G. vaginalis and medium (if used)
line_map<-data.frame(comparison=names(color_map),line_type=c("solid","dashed","solid","dashed","dashed","solid","dashed"))
## Merge tables together to map DE results to plot annotations
edgeR_results_colors<-data.frame(comparison=names(color_map),colr=unname(color_map))
edgeR_results.melt<-merge(edgeR_results.melt,edgeR_results_colors)
edgeR_results.melt<-merge(edgeR_results.melt,line_map)
edgeR_results.melt<-merge(edgeR_results.melt,dplyr::select(Pathways_design,c(comp,L,ref)),all.x=T,by.x="comparison",by.y="comp")
edgeR_results.melt$ExposureTime<-as.numeric(edgeR_results.melt$ExposureTime)
## Format and plot the cell cycle pathway-related gene expression's logFC over the timecourse
cycle_genes<-c("HDAC4","EP300","CDKN1A","CDK4","CCND1","CCNE2","ESR1","EGFR") ## Select which cell cycle genes to plot
cycle_genes_expression<- dplyr::filter(edgeR_results.melt,gene %in% cycle_genes &  ref=="M" ) ## Only include the cell cycle genes and cell culture medium as the reference
cycle_genes_expression<-unique(cycle_genes_expression)
cycle_genes_expression<-spread(cycle_genes_expression,key = value_type,value = value) ## This will make the logFC, FDR, and other DE attributes into colums for easier plotting. The plot will use logFC and FDR information
cycle_genes_expression$gene<-factor(cycle_genes_expression$gene,levels = cycle_genes,ordered = T) ## Maintain order of genes- this follows logical order discussed in thesis.
cycle_genes_expression[cycle_genes_expression$Pvalue_adj<0.01,"DE.pval"]<-"*" ## Annotate which samples are DE by FDR
## Make plot
long_plot.cc<-ggplot(cycle_genes_expression)+geom_point(aes(x=as.numeric(ExposureTime),y=logFC,col=comparison),size=3)+
geom_line(aes(x=as.numeric(ExposureTime),y=logFC,col=comparison),size=2)+
facet_wrap(~gene,scales = "free_y",nrow =2)+theme_bw()+scale_color_manual(values = color_map)+
geom_hline(yintercept =0)+geom_hline(yintercept =c(-1,0,1),lty=2)+xlab("Exposure Time (hours)")+
geom_text(aes(x=as.numeric(ExposureTime),y=logFC,label=DE.pval),size=8)+
mBio+
ylab("log (Fold Change)")+scale_x_continuous(breaks=c(4,13,22))
plot(long_plot.cc)
cairo_ps(paste0(thesis_figures_directory,FIGURE_LONGITDUINAL_GENEEXP.cycle),width = 8,height = 6)
plot(long_plot.cc)
dev.off()
# Chunk 27: Timestamp2
## Log session info
filewritable_time<-gsub(gsub(Sys.time(),pattern = " ",replacement = "_"),pattern = "-|:",replacement = "")
(sessionInfo_latex<-toLatex(sessionInfo()))
write(sessionInfo_latex,paste0(R_script_output_directory,"R_sessionInfo_",filewritable_time,".log.txt"))
timestamp()
##------ Thu Nov 16 22:09:28 2017 ------##
(Lacto_RF$top_features$top_features.all<-row.names(Lacto_RF$rfp$importance_w_pval[Lacto_RF$rfp$importance_w_pval[,"%IncMSE.pval"]<=pval_threshold & Lacto_RF$rfp$importance_w_pval[,"IncNodePurity.pval"]<=pval_threshold ,]))
accuracy_table.Nugent
hist(abs(accuracy_table.Nugent$predicted- accuracy_table.Nugent$actual))
plot(accuracy_table.Nugent$predicted, accuracy_table.Nugent$actual)
print(paste0("The Nugent-RF model correctly predicted the Nugent score within ",round(mean_absolute_error.Nugent,digits = 2)," values on average. There were ",length(Lacto_RF$top_features$top_features.all)," significant miRNAs using Nugent-RF."))
hist(abs(accuracy_table.Nugent$predicted- accuracy_table.Nugent$actual))
print(paste0("The Nugent-RF model correctly predicted the Nugent score within ",round(mean_absolute_error.Nugent,digits = 2)," values on average. There were ",length(Lacto_RF$top_features$top_features.all)," significant miRNAs using Nugent-RF."))
plot(accuracy_table.Nugent$predicted, accuracy_table.Nugent$actual)
library(ggbiplot)
pca.p <- ggbiplot(counts.pca, groups = group,
obs.scale = obs.scale, var.scale = var.scale ,
ellipse = ellipse,
circle = circle,var.axes =var.axes, ...)
library(ggbiplot)
plot_pca(SRL_counts_meta,"Log miRNA Raw Count Distance, PRE QC",color_by = "Batch",ploly = F,seed_val = seed_val)##FIGURE
plot_QC.preQC.batch<-plot_pca(SRL_counts_meta,"Log miRNA Raw Count Distance, PRE QC",color_by = "Batch",ploly = F,seed_val = seed_val)##FIGURE
plot(plot_QC.preQC.batch$pca.p)
plot_QC.preQC.batch$gPCA.result$p.val
plot_QC.preQC.sid<-plot_pca(SRL_counts_meta,"Log miRNA Raw Count Distance, PRE QC",color_by = "SID",ploly = F,seed_val = seed_val)##FIGURE
plot(plot_QC.preQC.sid$pca.p)
plot_QC.preQC.sid$gPCA.result$p.val
plot_pca(SRL_counts_meta,"Log miRNA Raw Count Distance, PRE QC",color_by = "BVGroup",seed_val = seed_val)$pca.p##FIGURE
plot_pca(SRL_counts_meta,"Log miRNA Raw Count Distance, PRE QC",color_by = "NugentC",seed_val = seed_val)$pca.p##FIGURE
plot_QC.postQC.batch<-plot_pca(counts_meta.qc,"Log miRNA Raw Count Distance, POST QC",color_by ="Batch",ploly = F,seed_val = seed_val)##FIGURE
plot_QC.postQC.batch$pca.p
plot_QC.postQC.sid<-plot_pca(counts_meta.qc,"Log miRNA Raw Count Distance, POST QC",color_by = "SID",ploly = F,seed_val = seed_val)##FIGURE
plot_QC.postQC.sid$pca.p
plot_pca(counts_meta.qc,"Log miRNA Raw Count Distance, POST QC",color_by = "BVGroup",ploly = F,seed_val = seed_val)$pca.p##FIGURE
plot_pca(counts_meta.qc,"Log miRNA Raw Count Distance, POST QC",color_by = "NugentC",ploly = F,seed_val = seed_val)$pca.p##FIGURE
plot_RIN_meta(pData(counts_meta.qc),"hg.mapped.percent",col_by = "Batch")##FIGURE
plot_RIN_meta(pData(counts_meta.qc),"number_reads_mirs.percent_hgmapped",col_by = "Batch")##FIGURE
plot_RIN_meta(pData(counts_meta.qc),"number_reads_mirs.percent_surviving",col_by = "Batch")##FIGURE
dev.off()
plot_QC.normalized.batch<-plot_pca(expSet.normalized,color_by = "Batch",margins = unit(c(0,-200,0,-200),units = "points"),seed_val = seed_val)
plot_QC.normalized.batch$pca.p
plot_QC.normalized.sid<-plot_pca(expSet_log.normalized,color_by = "SID",ploly = F,logt = F,margins = unit(c(0,30,0,5),units = "pt"),seed_val = seed_val)
plot_QC.normalized.sid$pca.p
plot_pca(expSet_log.normalized,color_by = "BVGroup",logt = F)$pca.p
plot_pca(expSet_log.normalized,color_by = "NugentC",logt = F)$pca.p
print(paste0("PCA plots before and after sample removal and after normalization do not support batch effects (guided PCA p-values ",plot_QC.preQC.batch$gPCA.result$p.val,", ",plot_QC.postQC.batch$gPCA.result$p.val,", and ",plot_QC.normalized.batch$gPCA.result$p.val,", respectively), or subject-specific effects (guided PCA p-values ",plot_QC.preQC.sid$gPCA.result$p.val,", ",plot_QC.postQC.sid$gPCA.result$p.val,", and ",plot_QC.normalized.sid$gPCA.result$p.val,", respectively, Figure S1)."))
SRL_16S
joined_meta_amselPred
pData(counts_meta.qc)
joined_meta_amselPred$Pre_QC_ID %in% pData(counts_meta.qc)$Pre_QC_ID
pData(counts_meta.qc)$Pre_QC_ID %in% joined_meta_amselPred$Pre_QC_ID
load(file=paste0(R_script_input_directory,"CV_16S_AMSEL.Rdata"))
load(file=paste0(R_script_input_directory,"SRL_16S.Rdata"))
SRL_16S<-SRL_16S[!row.names(SRL_16S) %in% as.character(removed_samples$Pre_QC_ID),]
row.names(joined_meta_amselPred)
load(file=paste0(R_script_input_directory,"CV_16S_AMSEL.Rdata"))
load(file=paste0(R_script_input_directory,"SRL_16S.Rdata"))
SRL_16S<-SRL_16S[!row.names(SRL_16S) %in% as.character(removed_samples$Pre_QC_ID),]
LACTO_PROP<-rowSums(dplyr::select(SRL_16S,c(Lactobacillus_crispatus,Lactobacillus_jensenii,Lactobacillus_iners,Lactobacillus_gasseri)))
joined_meta_amselPred<-join(pData(counts_meta.qc),data.frame(Pre_QC_ID=names(LACTO_PROP),LACTO_PROP=LACTO_PROP),by="Pre_QC_ID")
row.names(joined_meta_amselPred)<-joined_meta_amselPred$Pre_QC_ID
load(file=paste0(R_script_input_directory,"CV_16S_AMSEL.Rdata"))
load(file=paste0(R_script_input_directory,"SRL_16S.Rdata"))
SRL_16S<-SRL_16S[!row.names(SRL_16S) %in% as.character(removed_samples$Pre_QC_ID),]
LACTO_PROP<-rowSums(dplyr::select(SRL_16S,c(Lactobacillus_crispatus,Lactobacillus_jensenii,Lactobacillus_iners,Lactobacillus_gasseri)))
joined_meta_amselPred<-join(pData(counts_meta.qc),data.frame(Pre_QC_ID=names(LACTO_PROP),LACTO_PROP=LACTO_PROP),by="Pre_QC_ID")
row.names(joined_meta_amselPred)<-joined_meta_amselPred$Pre_QC_ID
pData(counts_meta.qc)$Pre_QC_ID %in% joined_meta_amselPred$Pre_QC_ID
pData(counts_meta.qc)$Pre_QC_ID
joined_meta_amselPred$Pre_QC_ID
joined_meta_amselPred
row.names(model_input_Lactobacillus)
set.diff(row.names(model_input),row.names(model_input_Lactobacillus))
setdiff(row.names(model_input),row.names(model_input_Lactobacillus))
samples_without_16S<-setdiff(row.names(model_input),row.names(model_input_Lactobacillus))
TABLE_SRL_METADATA
TABLE_SEQSUMMARY
dplyr::filter(SRL_meta_table,!Pre_QC_ID %in% samples_without_16S)
ddply(dplyr::filter(SRL_meta_table,!Pre_QC_ID %in% samples_without_16S),c("BVGroup","SID"),summarise,PreQC=length(QC_removal_stage),PostQC=length(QC_removal_stage)-sum(as.numeric(QC_removal_stage),na.rm = T))
SRL_seq_summary
dplyr::filter(SRL_meta_table,!Pre_QC_ID %in% samples_without_16S)
dplyr::filter(SRL_meta_table,!Pre_QC_ID %in% samples_without_16S)$SID
dplyr::filter(SRL_meta_table,Pre_QC_ID %in% samples_without_16S)$SID
table(dplyr::filter(SRL_meta_table,Pre_QC_ID %in% samples_without_16S)$SID)
data.frame(table(dplyr::filter(SRL_meta_table,Pre_QC_ID %in% samples_without_16S)$SID))
SRL_meta_table
SRL_seq_summary
SRL_seq_summary
samples_without_16S.nsid<-data.frame(table(dplyr::filter(SRL_meta_table,Pre_QC_ID %in% samples_without_16S)$SID))
samples_without_16S.nsid
names(samples_without_16S.nsid)<-c("SID","Samples without 16S Seq")
samples_without_16S.nsid
merge(SRL_seq_summary,samples_without_16S.nsid)
samples_without_16S.nsid<-data.frame(table(dplyr::filter(SRL_meta_table,!Pre_QC_ID %in% samples_without_16S)$SID))
samples_with_16S.nsid<-data.frame(table(dplyr::filter(SRL_meta_table,!Pre_QC_ID %in% samples_without_16S)$SID))
samples_with_16S.nsid
names(samples_with_16S.nsid)<-c("SID","Samples with 16S Seq")
samples_without_16S
samples_with_16S.nsid<-data.frame(table(dplyr::filter(SRL_meta_table,!Pre_QC_ID %in% samples_without_16S)$SID))
samples_with_16S.nsid
names(samples_with_16S.nsid)<-c("SID","Samples with 16S Seq")
merge(SRL_seq_summary,samples_with_16S.nsid)
names(samples_with_16S.nsid)<-c("SID","With Lact. RA")
merge(SRL_seq_summary,samples_with_16S.nsid)
SRL_meta_table
samples_with_16S.nsid<-data.frame(table(dplyr::filter(SRL_meta_table,!Pre_QC_ID %in% samples_without_16S & is.na(SRL_meta_table$QC_removal_stage))$SID))
names(samples_with_16S.nsid)<-c("SID","With Lact. RA")
merge(SRL_seq_summary,samples_with_16S.nsid)
merge(SRL_seq_summary,samples_with_16S.nsid,all.x = T)
write.csv(SRL_seq_summary,file=paste0(thesis_tables_directory,TABLE_SEQSUMMARY),row.names=F,quote=F)
TABLE_SEQSUMMARY
SRL_seq_summary<-ddply(SRL_meta_table,c("BVGroup","SID"),summarise,PreQC=length(QC_removal_stage),PostQC=length(QC_removal_stage)-sum(as.numeric(QC_removal_stage),na.rm = T))
samples_with_16S.nsid<-data.frame(table(dplyr::filter(SRL_meta_table,!Pre_QC_ID %in% samples_without_16S & is.na(SRL_meta_table$QC_removal_stage))$SID))
names(samples_with_16S.nsid)<-c("SID","With Lact. RA")
SRL_seq_summary<-merge(SRL_seq_summary,samples_with_16S.nsid,all.x = T)
SRL_seq_summary<-SRL_seq_summary[order(SRL_seq_summary$BVGroup),]
write.csv(SRL_seq_summary,file=paste0(thesis_tables_directory,TABLE_SEQSUMMARY),row.names=F,quote=F)
