names(SRL_counts_table)
SRL_counts_table
names(data.frame(SRL_counts_table))
names(data.frame(SRL_counts_table))%in% SRL_meta_table$Pre_QC_ID
SRL_counts_table[,names(data.frame(SRL_counts_table))%in% SRL_meta_table$Pre_QC_ID]
SRL_counts_table<-SRL_counts_table[,names(data.frame(SRL_counts_table))%in% SRL_meta_table$Pre_QC_ID]
write.csv(SRL_counts_table,file=paste0(thesis_tables_directory,TABLE_COUNTS_RAW),row.names=T,quote=F)
## Stats on # reads hg (% surviving), # reads miRNA (% survibing, hg)
SRL_meta_table_summary_table<-data.frame(matrix(0,nrow=3,ncol=3));names(SRL_meta_table_summary_table)<-c("min","median","max");row.names(SRL_meta_table_summary_table)<-c("trimmed","hg19","miRNome")
SRL_meta_table_summary_table["trimmed",]<-summarise(SRL_meta_table,min=min(reads_surviving),median=median(reads_surviving),max=max(reads_surviving))
SRL_meta_table_summary_table["hg19",]<-summarise(SRL_meta_table,min=min(hg19.mapped),median=median(hg19.mapped),max=max(hg19.mapped))
SRL_meta_table_summary_table["miRNome",]<-summarise(SRL_meta_table,min=min(number_reads_mirs),median=median(number_reads_mirs),max=max(number_reads_mirs))
print(SRL_meta_table_summary_table)
print(paste("Number of samples in inital counts table:",ncol(SRL_counts_table)))
print(paste("Number of miRNAs in inital counts table:",nrow(SRL_counts_table)))
## Determine number of miRNAs without any counts across all samples
missing<-rowSums(SRL_counts_table)==0 #rowSums(is.na(SRL_counts_table))==ncol(SRL_counts_table) |
print(paste("Number of miRNAs without any counts across all",ncol(SRL_counts_table),"samples:",sum(missing)))
print(paste0("which leaves ",100*(1-sum(missing)/nrow(SRL_counts_table))," percent of all annotated miRNAs with at least 1 read"))
#print("...and the names of the miRNAs without any reads across all samples: ")
#names(missing)[missing]
##FIXME
# plot_QC.preQC.batch<-plot_pca(SRL_counts_meta,"Log miRNA Raw Count Distance, PRE QC",color_by = "Batch",ploly = F,seed_val = seed_val)##FIGURE
# plot(plot_QC.preQC.batch$pca.p)
# plot_QC.preQC.batch$gPCA.result$p.val
# plot_QC.preQC.sid<-plot_pca(SRL_counts_meta,"Log miRNA Raw Count Distance, PRE QC",color_by = "SID",ploly = F,seed_val = seed_val)##FIGURE
# plot(plot_QC.preQC.sid$pca.p)
# plot_QC.preQC.sid$gPCA.result$p.val
# plot_pca(SRL_counts_meta,"Log miRNA Raw Count Distance, PRE QC",color_by = "BVGroup",seed_val = seed_val)$pca.p##FIGURE
# plot_pca(SRL_counts_meta,"Log miRNA Raw Count Distance, PRE QC",color_by = "NugentC",seed_val = seed_val)$pca.p##FIGURE
##END FIXME
## Get a *ROUGH* idea of miRNA coverage by dividing counts by # of annotated miRNAs in genome
(number_mirs_genome<-nrow(SRL_counts_meta)) ## number of annotated miRNAs
#SRL_counts_table<-SRL_counts_table[!missing,] ## non missing counts only
SRL_counts_meta<-SRL_counts_meta[!missing]
sum(missing)
## Number of miRNAs completley removed due to non-detection
nrow(SRL_counts_meta)
(plot_QC.RIN.percent.batch<-plot_RIN_meta(SRL_meta_table,"number_reads_mirs.percent_hgmapped",col_by="Batch",y_series_label = "Percentage of miRNA Reads of All hg19 Mapped Reads"))##FIGURE
(plot_QC.RIN.percent.sid<-plot_RIN_meta(SRL_meta_table,"number_reads_mirs.percent_hgmapped",col_by="SID",y_series_label = "Percentage of miRNA Reads of All hg19 Mapped Reads"))
(plot_QC.RIN.number.batch<-plot_RIN_meta(SRL_meta_table,"number_reads_mirs",col_by="Batch",y_series_label = "Number of miRNA Reads"))##FIGURE
(plot_QC.RIN.number.sid<-plot_RIN_meta(SRL_meta_table,"number_reads_mirs",col_by="SID",y_series_label = "Number of miRNA Reads"))
## Range of miRNA coverage based on simple reads/#annotated miRNAs
print(summary(colSums(SRL_counts_table))/number_mirs_genome)
## Avergae coverage
data.frame(Pre_QC_ID=SRL_meta_table$Pre_QC_ID,avg_coverage=SRL_meta_table$number_reads_mirs/number_mirs_genome)
hist(log(colSums(SRL_counts_table)/number_mirs_genome,10),main="Log10 Total miRNA Counts/# miRNAs")
abline(v = log(100,10))
.1*number_mirs_genome
## Samples with "low coverage", i.e., less than 1E4 reads/#miRs
low_coverage<-(colSums(SRL_counts_table))<=(125)*number_mirs_genome ##125
sum(low_coverage)
125 * 1869
## An idea of the samples with "low coverage":
print(head(SRL_counts_table[,low_coverage]))
(removed_samples<-remove_poorQC_samples(removed_samples = removed_samples,sample_list =unique(colnames(SRL_counts_table[,low_coverage])),reason = "Low_Coverage"))
## Remove those samples with low coverage
counts_meta.qc<-subset_ExpressionSet(expSet = SRL_counts_meta,filterOut = c(as.character(removed_samples$Pre_QC_ID)))
nrow(pData(counts_meta.qc))
ncol(exprs(counts_meta.qc))
ncol(pData(counts_meta.qc))
nrow(exprs(counts_meta.qc))
##FIXME
#
# ## Re-plot after QC
# plot_QC.postQC.batch<-plot_pca(counts_meta.qc,"Log miRNA Raw Count Distance, POST QC",color_by ="Batch",ploly = F,seed_val = seed_val)##FIGURE
# plot_QC.postQC.batch$pca.p
#
# plot_QC.postQC.sid<-plot_pca(counts_meta.qc,"Log miRNA Raw Count Distance, POST QC",color_by = "SID",ploly = F,seed_val = seed_val)##FIGURE
# plot_QC.postQC.sid$pca.p
#
# plot_pca(counts_meta.qc,"Log miRNA Raw Count Distance, POST QC",color_by = "BVGroup",ploly = F,seed_val = seed_val)$pca.p##FIGURE
# plot_pca(counts_meta.qc,"Log miRNA Raw Count Distance, POST QC",color_by = "NugentC",ploly = F,seed_val = seed_val)$pca.p##FIGURE
#
# plot_RIN_meta(pData(counts_meta.qc),"hg.mapped.percent",col_by = "Batch")##FIGURE
# plot_RIN_meta(pData(counts_meta.qc),"number_reads_mirs.percent_hgmapped",col_by = "Batch")##FIGURE
# plot_RIN_meta(pData(counts_meta.qc),"number_reads_mirs.percent_surviving",col_by = "Batch")##FIGURE
# dev.off()
median_RIN<-median(pData(counts_meta.qc)$RIN,na.rm = T)
print(paste0("The median RINe score was ",median_RIN,", with ",round(100*sum(pData((counts_meta.qc))$RIN<7,na.rm = T)/length(pData((counts_meta.qc))$RIN),digits = 1),"% of the samples having a RINe greater than 7."))
number_miRNAs<-mapping_stats(pData(counts_meta.qc)$number_reads_mirs)
percent_miRNAs.hg<-round(mapping_stats(pData(counts_meta.qc)$number_reads_mirs.percent_hgmapped),1)
percent_miRNAs.oftrimmed<-round(mapping_stats(pData(counts_meta.qc)$number_reads_mirs.percent_surviving),1)
print(paste0("The median (minimum/maximum) percentage of post-QC miRNA reads relative to all hg19 mapped and total reads was ",percent_miRNAs.hg$median,"% (",percent_miRNAs.hg$min,"%/",percent_miRNAs.hg$max,"%) and ",percent_miRNAs.oftrimmed$median,"% (",percent_miRNAs.oftrimmed$min,"%/",percent_miRNAs.oftrimmed$max,"%), respectively. However, the  median number of post-QC hg19 mapped miRNA reads was ",number_miRNAs$median,", with a minimum ",number_miRNAs$min," and maximum ",number_miRNAs$max,". Thus, despite low relative miRNA read counts, the estimated coverage ranged from ",round(number_miRNAs$min/number_mirs_genome,digits = 0),"X-",round(number_miRNAs$max/number_mirs_genome,digits = 0),"X across the entire miRnome (",number_mirs_genome," annotated miRNAs)."))
sum(pData((counts_meta.qc))$number_reads_mirs<10^6,na.rm = T)/length(pData((counts_meta.qc))$number_reads_mirs)
##FIXME
# cairo_ps(file = paste0(thesis_figures_directory,FIGURE_QC_PCA.PREQC.BYBATCH),width = 8,height = 5.5)
# plot(plot_QC.preQC.batch$pca.p)
# dev.off()
# cairo_ps(file = paste0(thesis_figures_directory,FIGURE_QC_PCA.PREQC.BYSUBJ),width = 8,height = 5.5)
# plot(plot_QC.preQC.sid$pca.p)
# dev.off()
# cairo_ps(file = paste0(thesis_figures_directory,FIGURE_QC_PCA.RMLOW.BYBATCH),width = 8,height = 5.5)
# plot(plot_QC.postQC.batch$pca.p)
# dev.off()
# cairo_ps(file = paste0(thesis_figures_directory,FIGURE_QC_PCA.RMLOW.BYSUBJ),width = 8,height = 5.5)
# plot(plot_QC.postQC.sid$pca.p)
# dev.off()
# cairo_ps(file = paste0(thesis_figures_directory,FIGURE_QC_RIN_v_READS.PROP),width = 8,height = 5.5)
# plot(plot_QC.RIN.percent.batch)
# dev.off()
# cairo_ps(file = paste0(thesis_figures_directory,FIGURE_QC_RIN_v_READS.ABS),width = 8,height = 5.5)
# plot(plot_QC.RIN.number.batch)
# dev.off()
SRL_meta_table
is.na(SRL_meta_table$CST)
SRL_meta_table$QC_removal_stage
miRNA_extractions<-SRL_meta_table[is.na(SRL_meta_table$QC_removal_stage) & !is.na(SRL_meta_table$CST),] ## Samples associated with miRNA libraries used in final study- i.e., don't include samples removed due to poor QC.
miRNA_extractions
removed_samples
SRL_meta_table<-left_join(SRL_meta_table,removed_samples,by="Pre_QC_ID")
print(paste0("There were 5 samples removed due to insufficient library material or failure to sequence, and ",sum(!is.na(SRL_meta_table$QC_removal_stage) & SRL_meta_table$QC_removal_stage %in% c("Low_Coverage","Visual Outlier"))," samples were removed due to low total miRNA reads or outliers."))
SRL_meta_table
write.csv(SRL_meta_table,file=paste0(thesis_tables_directory,TABLE_SRL_METADATA),row.names=F,quote=F)
SRL_seq_summary<-ddply(SRL_meta_table,c("BVGroup","SID"),summarise,PreQC=length(QC_removal_stage),PostQC=length(QC_removal_stage)-sum(as.numeric(QC_removal_stage),na.rm = T))
SRL_seq_summary<-SRL_seq_summary[order(SRL_seq_summary$BVGroup),]
write.csv(SRL_seq_summary,file=paste0(thesis_tables_directory,TABLE_SEQSUMMARY),row.names=F,quote=F)
SRL_meta_table
is.na(SRL_meta_table$QC_removal_stage)
miRNA_extractions<-SRL_meta_table[is.na(SRL_meta_table$QC_removal_stage) & !is.na(SRL_meta_table$CST),] ## Samples associated with miRNA libraries used in final study- i.e., don't include samples removed due to poor QC.
miRNA_extractions
### Load previously prepared 16S metataxonomic data. metatdata
load(file=paste0(R_script_input_directory,"subject_plot_data.Rdata"))
OTU_METADATA<-subject_plot_data$OTU_METADATA ## metadata
rRNA_16S<-subject_plot_data$relativeAbundance ## taxa assignments/relative abundances
sampleInfoColNames<-subject_plot_data$sampleInfoColNames ## holds which column names are associated with metadata
miRNA_extractions<-SRL_meta_table[is.na(SRL_meta_table$QC_removal_stage) & !is.na(SRL_meta_table$CST),] ## Samples associated with miRNA libraries used in final study- i.e., don't include samples removed due to poor QC.
## Also adding in only samples that have 16S data as well. Will wind up dropping 16 samples, but it is what it is...
subject_plot_list<- unique(miRNA_extractions$SID) ## Subject IDs to plot
global_species_list<-NULL ## Initialize a container to store all species plotted in fig 1 as a legend
for(s in subject_plot_list){  ## iterate through the subject's
print(s)
#s<-"UAB008"
## ////////////////////////////////// ##
## ///  Subeset Data by Subject   /// ##
## ////////////////////////////////// ##
relabundance<-filter(rRNA_16S,SID==s)  ## taxa relative abundance for subject
otu_count<-OTU_METADATA[OTU_METADATA$SID==s,] ## Metadata for subject
## Drop 16S samples that have less than the threshold for high confidence taxa assignments
lowCountThreshold<-1000
low_count_samples<-otu_count[otu_count$X16S_total_counts<lowCountThreshold,"SERIAL"]
##Nugent score data for subject
nugent<-filter(OTU_METADATA,SID==s) %>% dplyr::select(SERIAL,NUGENT_SCORE)
nugent$color<-"grey"
## Colors/handling for missing Nugent scores
nugent[is.na(nugent$NUGENT_SCORE),"color"]<-"red"
nugent[!is.na(nugent$NUGENT_SCORE),"color"]<-"black"
nugent[is.na(nugent$NUGENT_SCORE),"NUGENT_SCORE"]<-(-1)
## pH data for subject
ph<-filter(OTU_METADATA,SID==s) %>% dplyr::select(SERIAL,PH)
## Colors/handling for missing pH values
ph$color<-"grey"
ph[is.na(ph$PH),"color"]<-"red"
ph[!is.na(ph$PH),"color"]<-"black"
ph[is.na(ph$PH),"PH"]<-2
##MEtadata for subject
dailyDiaryMetadata<-filter(OTU_METADATA,SID==s)
## ////////////////////////////////// ##
##  Determine global plot time scale  ##
## ////////////////////////////////// ##
SERIAL_global<-sort(unique(dailyDiaryMetadata$SERIAL,relabundance$SERIAL,miRNA_extractions$SERIAL)) ## All time points
day<-SERIAL_global%%7 ## Day relative to all SERIALized time points
day[SERIAL_global%%7==0]<-7 ## the mod calcualtion causes all day 7 to be 0. Repalce w/ 7.
week<-((SERIAL_global-day)/7)+1 ## Week back calculated from SERIALized time points.
time_points<-data.frame(SERIAL=SERIAL_global, day=day, week=week) ## container
time_points$plot_label=""
time_points[time_points$day==7,"plot_label"]<-time_points[time_points$day==7,"week"] ## plot labels every week
global_min_time<-max(c(min(miRNA_extractions[miRNA_extractions$SID==s,"SERIAL"]-5),min(SERIAL_global,na.rm = T) ))
## min time point -  the max of the min of either miR extractions or all data
global_max_time<-min(c(max(miRNA_extractions[miRNA_extractions$SID==s,"SERIAL"]+5),max(SERIAL_global,na.rm = T))) ## max time point across all data
removed_samples
## cleaner way to define as variable for X axis:
time_breaks<-time_points$SERIAL
time_label<-time_points$plot_label
time_limits<-c(global_min_time-1,global_max_time+1)
## Determine the min & max of time points
rect_min<-time_breaks[!time_breaks%in% miRNA_extractions[miRNA_extractions$SID==s,"SERIAL"]]-.5
rect_max<-time_breaks[!time_breaks%in% miRNA_extractions[miRNA_extractions$SID==s,"SERIAL"]]+.5
## ////////////////////////////////// ##
## / Determine most adbundant species ##
## ////////////////////////////////// ##
# ////////////////////////////////////////////////////////////////////////
# Most abundant species defined per subject & based on cutoff. ##
# All other taxa binned into "other" #
# ////////////////////////////////////////////////////////////////////////
### Grab just relative abundances, no sample info columns:
relabundance[is.na(relabundance)]<-0
relabundance<-relabundance[relabundance$SERIAL>=time_limits[1] &  relabundance$SERIAL<=time_limits[2],]
relabundance_for_max_calc<-relabundance[,!(names(relabundance) %in% sampleInfoColNames)]
### Calucalte max for each taxa
max_relabundances<-apply(relabundance_for_max_calc,2,max)
### number of species whose rel abundance is above a certain threshold
numHighAbundSpecies<-sum(max_relabundances>raThreshold,na.rm = T)
##### Plot either the top X most abundant species,
#####   or the most abundant species above max plottable species, whichever is lesser.
#####   This helps prevent "taxa overload" on the plot.
most_abundant_species<-"" ## Will hold names of most abundant species.
if(numHighAbundSpecies>nSpecies){
most_abundant_species<-names(sort(max_relabundances,decreasing = T))[1:nSpecies]
}else{
most_abundant_species<- names(max_relabundances[!is.na(max_relabundances) & max_relabundances>raThreshold])
}
##### Pull the most abundant species (defined above), bin the remainder into "other".
#####   Also recombine the 'sample info' onto most abundant/other species table.
most_abundant_relabundance<-relabundance[most_abundant_species]
other_relabundance<-rowSums(relabundance[!(names(relabundance) %in% most_abundant_species |
names(relabundance) %in% sampleInfoColNames)],na.rm=T)
otu_count_relabundance<-cbind(relabundance[names(relabundance) %in% c("SERIAL",sampleInfoColNames)],
most_abundant_relabundance,Other=other_relabundance)
##Update global species list with any new species
global_species_list<-unique(c(most_abundant_species,global_species_list,"Other"))
reshape_names<-c("Pre_QC_ID","SID","UID","SERIAL")
otu_count_reshape<-melt(data = otu_count_relabundance,id.vars=reshape_names)
names(otu_count_reshape)<-c(reshape_names,"species","count")
### ///////////////////////////////////////////// ###
### /////////         OTU Plot          ///////// ###
### ///////////////////////////////////////////// ###
otuPlot<- ggplot(otu_count_reshape)+
geom_area(aes(x=SERIAL,y=count,fill=species),
stat="identity",show.legend=F,position="fill")+#,width=1)+
mBio+
theme(axis.ticks = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(size = rel(1.5)),
legend.key.size=unit(8, "points"),
legend.title = element_blank(),
legend.text = element_text(size = rel(.5),face="italic"),
axis.title = element_text(size = rel(sizes)),
plot.margin=unit(c(2.5,40,2.5,10),units="points"),#margins
panel.grid.major.y=element_line(colour = "grey73"),
panel.grid.minor.x  = element_blank())+
ylab("Phylotype Relative\nAbundance (%)")+
geom_vline(xintercept = otu_count_reshape$SERIAL,size=rel(.2),col="grey")+
scale_fill_manual(values=subject_long_taxa_colors)+
ggtitle(paste0(s))+
annotate("rect", xmin=rect_min, xmax=rect_max, ymin=0, ymax=1, alpha=alpha_rect, fill=rect_fill)+
scale_x_continuous(breaks=time_breaks,label=time_label,limits=time_limits)
## Determine any dropped sample (post QC) time points and place an * above
dropped_samples.serial<-otu_count[otu_count$Pre_QC_ID %in% removed_samples$Pre_QC_ID,"SERIAL"]
if(length(dropped_samples.serial)!=0){otuPlot<-otuPlot+annotate("text", x =dropped_samples.serial , y = 1.01, label = "*",size=8)}
### ///////////////////////////////////////////// ###
### /////////      Nugent Plot          ///////// ###
### ///////////////////////////////////////////// ###
nugentPlot<-ggplot(data=nugent)+
geom_bar(aes(x=as.numeric(SERIAL),y=NUGENT_SCORE,width=.9,fill=color),
stat="identity",position = position_dodge(width=0.5))+
mBio+
geom_hline(yintercept = c(3,7),size=rel(1),col="pink")+ ## Defines Nugent score 3 & 7 (BV
theme(axis.ticks = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_text(size = rel(1.5*sizes)),
legend.position="none",
plot.margin=margins,
panel.grid.major.y=element_line(colour = "grey73"),
panel.grid.minor.x  = element_blank())+
ylab("Nugent\nScore")+
scale_fill_manual(values=c('black','red'))+
scale_x_continuous(breaks=time_breaks,label=time_label,limits=time_limits)+
annotate("rect", xmin=rect_min, xmax=rect_max, ymin=0, ymax=10, alpha=alpha_rect, fill=rect_fill)+
scale_y_continuous(breaks=c(0,3,7,10),limits=c(-1.25,10.5))
### ///////////////////////////////////////////// ###
### /////////     Metadata Plot         ///////// ###
### ///////////////////////////////////////////// ###
metaPlot<-ggplot(dailyDiaryMetadata, aes(x=as.numeric(SERIAL)))+
geom_point(aes(y=1*(as.numeric(VAG_DIS)==1),size=2),
pch=16,col='blue',position = position_dodge(width=0.5))+
geom_point(aes(y=2*(as.numeric(VAG_ODOR)==1),size=2),
pch=16,col='blue',position = position_dodge(width=0.5))+
geom_point(aes(y=3*(as.numeric(MENSTRUATION)>0),size=as.numeric(MENSTRUATION)),
col='red',pch=16, position = position_dodge(width=0.5))+
scale_size(range = c(2+2,4+2))+ ## for menstru point sizes. Bounded by 3 points on a scale.
mBio+
theme(legend.position="none",
plot.title = element_text(size = rel(sizes)),
axis.text = element_text(size = rel(2*sizes)),
axis.title = element_text(size = rel(sizes)),
axis.title.y=element_text(vjust=.2),
axis.title.x=element_text(vjust=-.2),
axis.text.y=element_text(size=rel(0.75)), ## change back to 0.75
plot.margin=unit(c(-2.5,40,5,5),units="points"),
panel.grid.major.y=element_line(colour = "grey73"),
panel.grid.minor.x  = element_blank())+
xlab("Week")+
ylab("")+
annotate("rect", xmin=rect_min, xmax=rect_max, ymin=1, ymax=3, alpha=alpha_rect, fill=rect_fill)+
scale_x_continuous(breaks=time_breaks,label=time_label,limits=time_limits)+
scale_y_continuous(breaks=1:3,labels = c("Discharge",
"Odor",
"Menstruation"),limits=c(0.5,3.5))
###### Determine if subject has low qualiyt daily dairy flag and annotate plot:
if(!sum(is.na(dailyDiaryMetadata$Diary_QUALITY_FLAG))){
min<-min(timeTable$SERIAL,na.rm = T)
max<-max(timeTable$SERIAL,na.rm = T)
middle.x<-(max-min)/2
middle.y<<-(16-1)/2
metaPlot<-metaPlot + annotate("text", x = middle.x,
y = middle.y, label = "?",
size=rel(40),
col="grey")
}
### ///////////////////////////////////////////// ###
### /////////          pH Plot          ///////// ###
### ///////////////////////////////////////////// ###
ph_normalization_factor<-3.5
## Notice the pH value scale is "normalized" by subtracting "ph_normalization_factor" from the actual pH value, then re-labeling the y axis. This is very dangerous, but ggplot will not permit bar plots that start from > 0 .
ph[ph$PH==2,"PH"]<-ph_normalization_factor-0.5
phPlot<-ggplot(ph,aes(x=as.numeric(SERIAL),
y=as.numeric(PH)-ph_normalization_factor,width=.9,fill=color))+
geom_bar(stat="identity",position = position_dodge(width=0.5))+
scale_fill_manual(values=c('black','red'))+
mBio+
geom_hline(yintercept = c(4.5-ph_normalization_factor),
size=rel(1),col="pink")+ ## Vaginal pH>4.5 one criteria for BV.
theme(axis.ticks = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_blank(),
axis.text = element_text(size = rel(1.5*sizes)),
legend.position="none",
plot.margin=margins,
panel.grid.major.y=element_line(colour = "grey73"),
panel.grid.minor.x  = element_blank())+
ylab("pH")+
annotate("rect", xmin=rect_min, xmax=rect_max, ymin=min(0,min(ph$PH,na.rm = T)-ph_normalization_factor-0.25), ymax= max(ph$PH,na.rm = T)+0.25-ph_normalization_factor, alpha=alpha_rect, fill=rect_fill)+
scale_x_continuous(breaks=time_breaks,label=time_label,limits=time_limits)+
scale_y_continuous(breaks=c(4,4.5,5,5.5)-ph_normalization_factor, limits=c(-0.75,5.8+0.25-ph_normalization_factor),labels=c("4","4.5","5","5.5"))
### ///////////////////////////////////////////// ###
### /////////    Tie Plots Together     ///////// ###
### ///////////////////////////////////////////// ###
## ////////////////////////// ##
## //Define plots as Grobs/// ##
## ////////////////////////// ##
grob.otuPlot <- ggplotGrob(otuPlot)
grob.nugentPlot <- ggplotGrob(nugentPlot)
grob.phPlot<-ggplotGrob(phPlot)
grob.metaPlot <- ggplotGrob(metaPlot)
## ////////////////////////// ##
## ///   Find max width   /// ##
## ////////////////////////// ##
maxWidth = grid::unit.pmax(grob.otuPlot$widths[1:6],
grob.nugentPlot$widths[1:5],
grob.phPlot$widths[1:5],
grob.metaPlot$widths[1:5])
## ////////////////////////// ##
## /Redefine common max width ##
## ////////////////////////// ##
grob.nugentPlot$widths[1:6] <- as.list(maxWidth)
grob.otuPlot$widths[1:6] <- as.list(maxWidth)
grob.metaPlot$widths[1:6] <- as.list(maxWidth)
grob.phPlot$widths[1:6]<-as.list(maxWidth)
### ///////////////////////////////////////////// ###
### /////////      Write/Draw Plot     ///////// ###
### ///////////////////////////////////////////// ###
cairo_ps(paste0(thesis_figures_directory,FIGURE_SUBJECT_PLOTS,s,".eps"),width = 11,height = 8.5)
grid.arrange(grob.otuPlot,
grob.nugentPlot,
grob.phPlot,
grob.metaPlot,
ncol=1,nrow=4,
heights=c(2.5,1,1,1))
dev.off()
}
## //////
## The following plots the figure legend containing colors for all taxa plotted in for loos
dummy_globalSpeciesList<-data.frame(SERIAL=1,species=global_species_list,count=1)
dummy_globalSpeciesList_plot<-ggplot(dummy_globalSpeciesList)+
geom_area(aes(x=SERIAL,y=count,fill=species,order=order(as.numeric(as.factor(dummy_globalSpeciesList$species)),decreasing = F)),
stat="identity",show.legend=T,position="fill")+#,width=1)+
mBio+
theme(axis.ticks = element_blank(),
axis.title.x=element_blank(),
axis.text.x = element_blank(),
legend.key.size=unit(8, "points"),
legend.title = element_blank(),
legend.text = element_text(size = rel(.5),face="italic"),
axis.title = element_text(size = rel(sizes)),
plot.margin=unit(c(2.5,40,2.5,10),units="points"),#margins
panel.grid.major.y=element_line(colour = "grey73"))+
scale_fill_manual(values=subject_long_taxa_colors)+
ggtitle("Global Species List Color Codes")
##Write legend to file
cairo_ps(paste0(thesis_figures_directory,FIGURE_SUBJECT_PLOTS,"GlobalSpeciesList.eps"),width = 11,height = 8.5)
dummy_globalSpeciesList_plot
dev.off()
print(paste0("The median RINe score was ",median_RIN,", with ",round(100*sum(pData((counts_meta.qc))$RIN<7,na.rm = T)/length(pData((counts_meta.qc))$RIN),digits = 1),"% of the samples having a RINe greater than 7."))
print(paste("Number of samples in inital counts table:",ncol(SRL_counts_table)))
print(paste("Number of miRNAs in inital counts table:",nrow(SRL_counts_table)))
print(paste("Number of miRNAs without any counts across all",ncol(SRL_counts_table),"samples:",sum(missing)))
print(paste0("which leaves ",100*(1-sum(missing)/nrow(SRL_counts_table))," percent of all annotated miRNAs with at least 1 read"))
print("...and the names of the miRNAs without any reads across all samples: ")
names(missing)[missing]
print(summary(colSums(SRL_counts_table))/number_mirs_genome)
hist(log(colSums(SRL_counts_table)/number_mirs_genome,10),main="Log10 Total miRNA Counts/# miRNAs")
print(head(SRL_counts_table[,low_coverage]))
(removed_samples<-remove_poorQC_samples(removed_samples = removed_samples,sample_list =unique(colnames(SRL_counts_table[,low_coverage])),reason = "Low_Coverage"))
print(paste0("The median (minimum/maximum) percentage of post-QC miRNA reads relative to all hg19 mapped and total reads was ",percent_miRNAs.hg$median,"% (",percent_miRNAs.hg$min,"%/",percent_miRNAs.hg$max,"%) and ",percent_miRNAs.oftrimmed$median,"% (",percent_miRNAs.oftrimmed$min,"%/",percent_miRNAs.oftrimmed$max,"%), respectively. However, the  median number of post-QC hg19 mapped miRNA reads was ",number_miRNAs$median,", with a minimum ",number_miRNAs$min," and maximum ",number_miRNAs$max,". Thus, despite low relative miRNA read counts, the estimated coverage ranged from ",round(number_miRNAs$min/number_mirs_genome,digits = 0),"X-",round(number_miRNAs$max/number_mirs_genome,digits = 0),"X across the entire miRnome (",number_mirs_genome," annotated miRNAs)."))
proliferation_sigtests
paste0(thesis_tables_directory,TABLE_EDU_SCRATCH_QUANT)
paste0(thesis_tables_directory,TABLE_EDU_SCRATCH_QUANT)
setup_sigtest.data
scratch.summary.all
scratch_sigtest.all
PLOT_SCRATCH
control_meds.summary
EdU.summary
ggplot(EdU.summary,
aes(x=ExposureTime,y=mean,col=BCS))+
theme_bw()+
theme(plot.margin=unit(c(0,0,0,0),units = "pt"), text=element_text(size=16))+
geom_line(size=1.5,show.legend = T)+
geom_errorbar(aes(ymax=mean+sd,ymin=mean-sd),size=1,width=.5,show.legend = F)+
geom_point(size=6,show.legend = F)+
mBio+
ylab("Epithelial Cells Positive for EdU (%)")+
xlab("Exposure Time (hours)")+
scale_color_manual(values = color_scheme_BCS)+
scale_x_continuous(breaks=c(1,4,8,13,16,19,22),minor_breaks = NULL,limits=c(0,22.5))+
scale_y_continuous(limits=c(1.1*min(EdU.summary$mean-EdU.summary$sd,na.rm = T),102))+
geom_text(aes(label=sig),col='#252525',size=8,nudge_y = -.05)
EdU.summary$sig<-"*"
ggplot(EdU.summary,
aes(x=ExposureTime,y=mean,col=BCS))+
theme_bw()+
theme(plot.margin=unit(c(0,0,0,0),units = "pt"), text=element_text(size=16))+
geom_line(size=1.5,show.legend = T)+
geom_errorbar(aes(ymax=mean+sd,ymin=mean-sd),size=1,width=.5,show.legend = F)+
geom_point(size=6,show.legend = F)+
mBio+
ylab("Epithelial Cells Positive for EdU (%)")+
xlab("Exposure Time (hours)")+
scale_color_manual(values = color_scheme_BCS)+
scale_x_continuous(breaks=c(1,4,8,13,16,19,22),minor_breaks = NULL,limits=c(0,22.5))+
scale_y_continuous(limits=c(1.1*min(EdU.summary$mean-EdU.summary$sd,na.rm = T),102))+
geom_text(aes(label=sig),col='#252525',size=8,nudge_y = -.05)
EdU.summary
EdU_sigtest
data.frame(setup_sigtest.data$summary_stats,ExposureTime=as.numeric(gsub(et,pattern = "hr",replacement = "")))
setup_sigtest.data
EdU.summary
data.frame(setup_sigtest.data$summary_stats,ExposureTime=as.numeric(gsub(et,pattern = "hr",replacement = "")))
setup_sigtest.data
setup_sigtest.data$sigtest
dply::filter(setup_sigtest.data$sigtest,reference=="Cell Culture Medium")
dplyr::filter(setup_sigtest.data$sigtest,reference=="Cell Culture Medium")
EdU_sigtest
dplyr::filter(EdU_sigtest$sigtest,reference=="Cell Culture Medium")
dplyr::filter(EdU_sigtest,reference=="Cell Culture Medium")
PLOT_EDU
EdU.summary
EdU_sigtest
setup_sigtest.data
EdU.summary$BCS
unique(EdU.summary$BCS)
rev(unique(EdU.summary$BCS))
EdU.summary$BCS<-factor(EdU.summary$BCS,rev(unique(EdU.summary$BCS)),ordered = T)
EdU.summary$BCS
PLOT_EDU<-
ggplot(EdU.summary,
aes(x=ExposureTime,y=mean,col=BCS))+
theme_bw()+
theme(plot.margin=unit(c(0,0,0,0),units = "pt"), text=element_text(size=16))+
geom_line(size=1.5,show.legend = T)+
geom_errorbar(aes(ymax=mean+sd,ymin=mean-sd),size=1,width=.5,show.legend = F)+
geom_point(size=6,show.legend = F)+
mBio+
ylab("Epithelial Cells Positive for EdU (%)")+
xlab("Exposure Time (hours)")+
scale_color_manual(values = color_scheme_BCS)+
scale_x_continuous(breaks=c(1,4,8,13,16,19,22),minor_breaks = NULL,limits=c(0,22.5))+
scale_y_continuous(limits=c(1.1*min(EdU.summary$mean-EdU.summary$sd,na.rm = T),102))
PLOT_EDU
EdU.summary$BCS
PLOT_QPCR_TIMECOURSE
qpcr_sigtest
filter(qpcr_sigtest,ExposureTime=="4hr" & !qpcr_sigtest$reference=="0.06% D-lactic acid")
color_scheme_BCS
ddct_LacticAcid_plot
color_scheme_BCS<- c("L. crispatus"= unname(subject_long_taxa_colors["Lactobacillus_crispatus"]),
"L. jensenii" = unname(subject_long_taxa_colors["Lactobacillus_jensenii"]),
"L. iners" = unname(subject_long_taxa_colors["Lactobacillus_iners"]),
"G. vaginalis" = unname(subject_long_taxa_colors["Gardnerella_vaginalis"]),
"Cell Culture Medium"='blue',
"0.1% D-lactic acid"="#4dac26",
"0.1% L-lactic acid"="#d01c8b",
"1% lactic acid, pH 7.66"="#386cb0",
"0.06% L-lactic acid"="#f1b6da",
"0.06% D-lactic acid"="#b8e186",
# "0.1% DL-lactic acid"= "#b6daf1"
"DL_10"= "#b6daf1",
"0.1% DL lactic acid" = "#b6daf1",
"0.1% DL-lactic acid" = "#b6daf1"
)
ggplot(filter(qpcr_sigtest,ExposureTime=="4hr" & !qpcr_sigtest$reference=="0.06% D-lactic acid"),aes(x=reference,y=-mean_diff,col=comparison))+
theme_bw()+
geom_hline(yintercept = 0,col="#9e9ac8",size=2.5)+
theme(plot.margin=unit(c(0,0,0,0),units = "pt"), text=element_text(size=14))+
geom_errorbar(aes(ymax=-mean_diff+se,ymin=-mean_diff-se),width=.2,show.legend = F,position = position_dodge(width = .2))+
geom_point(size=6,show.legend = T,position = position_dodge(width = .2))+
ylab(expression(paste(-Delta,Delta,"Ct")))+
xlab(expression(paste("Reference ",Delta,"Ct")))+
scale_color_manual(name=expression(paste("Exposure ",Delta,"Ct")),values = color_scheme_BCS)+
geom_text(aes(label=sig),col='#252525',size=8,nudge_y = -.05)
qpcr_sigtest[qpcr_sigtest$comparison=="L-lactic acid" & qpcr_sigtest$reference=="D-lactic acid","pval"]
qpcr_sigtest$comparison
qpcr_sigtest[qpcr_sigtest$comparison=="0.1 % D-lactic acid" & qpcr_sigtest$reference=="L-lactic acid","pval"]
qpcr_sigtest$reference
paste0("Additionally, the ∆∆Ct of miR-193b expression after 4 hours of exposure to 0.1% D-lactic acid relative to 0.1% L-lactic acid was found to be non-significant ( p=",qpcr_sigtest[qpcr_sigtest$comparison=="0.1% D-lactic acid" & qpcr_sigtest$reference=="0.1% L-lactic acid","pval"],").")
qpcr_sigtest[qpcr_sigtest$comparison=="0.1% D-lactic acid" & qpcr_sigtest$reference=="0.1% L-lactic acid","pval"]
qpcr_sigtests
ddct_LacticAcid_plot
PLOT_QPCR_TIMECOURSE
