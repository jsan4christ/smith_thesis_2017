),aes(col=gene,pch=BCS,lty=BCS,y=log(norm_count,10),x=as.numeric(gsub(ExposureTime,pattern = "HR",replacement = ""))))+geom_smooth(se = F)+geom_point()#+facet_wrap(~BCS)
ggplotly(p)
dev.off()
dev.off()
p
p<-ggplot(dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes & BCS %in% c("LCRISPATUS","GVAGINALIS","MEDIA")
),aes(col=gene,pch=BCS,lty=BCS,y=log(norm_count,10),x=as.numeric(gsub(ExposureTime,pattern = "HR",replacement = ""))))+geom_smooth(se = F)+geom_point()+facet_wrap(~BCS)
p
p<-ggplot(dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes #& BCS %in% c("LCRISPATUS","GVAGINALIS","MEDIA")
),aes(col=gene,pch=BCS,lty=BCS,y=log(norm_count,10),x=as.numeric(gsub(ExposureTime,pattern = "HR",replacement = ""))))+geom_smooth(se = F)+geom_point()+facet_wrap(~BCS)
p
p<-ggplot(dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes #& BCS %in% c("LCRISPATUS","GVAGINALIS","MEDIA")
),aes(col=gene,lty=BCS,y=log(norm_count,10),x=as.numeric(gsub(ExposureTime,pattern = "HR",replacement = ""))))+geom_smooth(se = F)+geom_point()+facet_wrap(~BCS)
p
p<-ggplot(dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes #& BCS %in% c("LCRISPATUS","GVAGINALIS","MEDIA")
),aes(col=gene,y=log(norm_count,10),x=as.numeric(gsub(ExposureTime,pattern = "HR",replacement = ""))))+geom_smooth(se = F)+geom_point#+facet_wrap(~BCS)
p<-ggplot(dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes #& BCS %in% c("LCRISPATUS","GVAGINALIS","MEDIA")
),aes(col=gene,lty=BCS,y=log(norm_count,10),x=as.numeric(gsub(ExposureTime,pattern = "HR",replacement = ""))))+geom_smooth(se = F)+geom_point#+facet_wrap(~BCS)
p<-ggplot(dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes #& BCS %in% c("LCRISPATUS","GVAGINALIS","MEDIA")
),aes(col=gene,lty=BCS,y=log(norm_count,10),x=as.numeric(gsub(ExposureTime,pattern = "HR",replacement = ""))))+geom_smooth(se = F)+geom_point()#+facet_wrap(~BCS)
p
Normalized_count.HMM$ExposureTime
gsub(Normalized_count.HMM$ExposureTime,pattern = "HR",replacement = "")
as.numeric(gsub(Normalized_count.HMM$ExposureTime,pattern = "HR",replacement = ""))
Normalized_count.HMM$ExposureTime.n<-as.numeric(gsub(Normalized_count.HMM$ExposureTime,pattern = "HR",replacement = ""))
table(Normalized_count.HMM$ExposureTime.n)
p<-ggplot(dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes #& BCS %in% c("LCRISPATUS","GVAGINALIS","MEDIA")
),aes(col=gene,lty=BCS,y=log(norm_count,10),x=ExposureTime.n))+geom_smooth(se = F)+geom_point()#+facet_wrap(~BCS)
p
p<-ggplot(dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes #& BCS %in% c("LCRISPATUS","GVAGINALIS","MEDIA")
),aes(col=gene,lty=BCS,y=log(norm_count,10),x=ExposureTime.n))+geom_smooth(se = F)#+geom_point()#+facet_wrap(~BCS)
p
dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes #& BCS %in% c("LCRISPATUS","GVAGINALIS","MEDIA")
)
p<-ggplot(dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes #& BCS %in% c("LCRISPATUS","GVAGINALIS","MEDIA")
),aes(col=gene,y=norm_count,x=ExposureTime.n))+geom_smooth(se = F)#+geom_point()#+facet_wrap(~BCS)
p
p<-ggplot(dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes #& BCS %in% c("LCRISPATUS","GVAGINALIS","MEDIA")
),aes(col=gene,lty=BCS,y=norm_count,x=ExposureTime.n))+geom_smooth(se = F)#+geom_point()#+facet_wrap(~BCS)
p
ggplotly(p)
Normalized_count.HMM$norm_count
log(Normalized_count.HMM$norm_count+.01,10)
min(Normalized_count.HMM$norm_count)
Normalized_count.HMM$norm_count_log<-log(Normalized_count.HMM$norm_count+.1,10)
p<-ggplot(dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes #& BCS %in% c("LCRISPATUS","GVAGINALIS","MEDIA")
),aes(col=gene,lty=BCS,y=norm_count_log,x=ExposureTime.n))+geom_smooth(se = F)#+geom_point()#+facet_wrap(~BCS)
p
ggplotly(p)
p<-ggplot(dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes #& BCS %in% c("LCRISPATUS","GVAGINALIS","MEDIA")
),aes(col=gene,lty=BCS,y=norm_count_log,x=ExposureTime.n))+geom_smooth(se = F)+geom_point()+facet_wrap(~BCS)
ggplotly(p)
GeneDECalls
GeneDECalls.LC
GeneDECalls.LC[,2]
threshold<-0.9
as.numeric(GeneDECalls.LC[,2])>-threshold
GeneDECalls.LC[as.numeric(GeneDECalls.LC[,2])>-threshold,]
row.names(GeneDECalls.LC[as.numeric(GeneDECalls.LC[,2])>-threshold,])
row.names(GeneDECalls.LC[as.numeric(GeneDECalls.LC[,2])>=threshold,])
grepl(GeneDECalls.LC[,1],pattern = "Up")
(grepl(GeneDECalls.LC[,1],pattern = "Up")
row.names(GeneDECalls.LC[(grepl(GeneDECalls.LC[,1],pattern = "Up-") | grepl(GeneDECalls.LC[,1],pattern = "Down-"))& as.numeric(GeneDECalls.LC[,2])>=threshold,])
row.names(GeneDECalls.LC[ as.numeric(GeneDECalls.LC[,2])>=threshold,])
threshold<-0.99
row.names(GeneDECalls.LC[(grepl(GeneDECalls.LC[,1],pattern = "Up-") | grepl(GeneDECalls.LC[,1],pattern = "Down-"))& as.numeric(GeneDECalls.LC[,2])>=threshold,])
GeneDECalls.LC[(grepl(GeneDECalls.LC[,1],pattern = "Up-") | grepl(GeneDECalls.LC[,1],pattern = "Down-"))& as.numeric(GeneDECalls.LC[,2])>=threshold,]
row.names(GeneDECalls.LJ[(grepl(GeneDECalls.LJ[,1],pattern = "Up-") | grepl(GeneDECalls.LJ[,1],pattern = "Down-"))& as.numeric(GeneDECalls.LJ[,2])>=threshold,])
intersect(row.names(GeneDECalls.LC[(grepl(GeneDECalls.LC[,1],pattern = "Up-") | grepl(GeneDECalls.LC[,1],pattern = "Down-"))& as.numeric(GeneDECalls.LC[,2])>=threshold,]),
row.names(GeneDECalls.LJ[(grepl(GeneDECalls.LJ[,1],pattern = "Up-") | grepl(GeneDECalls.LJ[,1],pattern = "Down-"))& as.numeric(GeneDECalls.LJ[,2])>=threshold,]))
threshold<-1
intersect(row.names(GeneDECalls.LC[(grepl(GeneDECalls.LC[,1],pattern = "Up-") | grepl(GeneDECalls.LC[,1],pattern = "Down-"))& as.numeric(GeneDECalls.LC[,2])>=threshold,]),
row.names(GeneDECalls.LJ[(grepl(GeneDECalls.LJ[,1],pattern = "Up-") | grepl(GeneDECalls.LJ[,1],pattern = "Down-"))& as.numeric(GeneDECalls.LJ[,2])>=threshold,]))
interesting_genes<-intersect(row.names(GeneDECalls.LC[(grepl(GeneDECalls.LC[,1],pattern = "Up-") | grepl(GeneDECalls.LC[,1],pattern = "Down-"))& as.numeric(GeneDECalls.LC[,2])>=threshold,]),
row.names(GeneDECalls.LJ[(grepl(GeneDECalls.LJ[,1],pattern = "Up-") | grepl(GeneDECalls.LJ[,1],pattern = "Down-"))& as.numeric(GeneDECalls.LJ[,2])>=threshold,]))
p<-ggplot(dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes #& BCS %in% c("LCRISPATUS","GVAGINALIS","MEDIA")
),aes(col=gene,lty=BCS,y=norm_count_log,x=ExposureTime.n))+geom_smooth(se = F)+geom_point()+facet_wrap(~BCS)
p
row.names(GeneDECalls.LC[(grepl(GeneDECalls.LC[,1],pattern = "Up-") )& as.numeric(GeneDECalls.LC[,2])>=threshold,])
interesting_genes<-intersect(row.names(GeneDECalls.LC[(grepl(GeneDECalls.LC[,1],pattern = "Up-") )& as.numeric(GeneDECalls.LC[,2])>=threshold,]),
row.names(GeneDECalls.LJ[(grepl(GeneDECalls.LJ[,1],pattern = "Up-"))& as.numeric(GeneDECalls.LJ[,2])>=threshold,]))
filter(Normalized_count.HMM.filter,gene %in% GeneDECalls$LCGV & BCS %in% c("LCRISPATUS"))
ggplot(filter(Normalized_count.HMM.filter,gene %in% GeneDECalls$LCGV & BCS %in% c("LCRISPATUS")),aes(col=gene,y=log(norm_count,10),x=as.numeric(gsub(ExposureTime,pattern = "HR",replacement = ""))))+geom_smooth(se = F)+geom_point()
interesting_genes
p<-ggplot(dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes #& BCS %in% c("LCRISPATUS","GVAGINALIS","MEDIA")
),aes(col=gene,lty=BCS,y=norm_count_log,x=ExposureTime.n))+geom_smooth(se = F)+geom_point()+facet_wrap(~BCS)
ggplotly(p)
interesting_genes<-union(row.names(GeneDECalls.LC[(grepl(GeneDECalls.LC[,1],pattern = "Up-") )& as.numeric(GeneDECalls.LC[,2])>=threshold,]),
row.names(GeneDECalls.LJ[(grepl(GeneDECalls.LJ[,1],pattern = "Up-"))& as.numeric(GeneDECalls.LJ[,2])>=threshold,]))
interesting_genes
union(row.names(GeneDECalls.GV[(grepl(GeneDECalls.GV[,1],pattern = "Up-") )& as.numeric(GeneDECalls.GV[,2])>=threshold,]),
row.names(GeneDECalls.M[(grepl(GeneDECalls.M[,1],pattern = "Up-"))& as.numeric(GeneDECalls.M[,2])>=threshold,]))
set.diff
setdiff(intersect(row.names(GeneDECalls.LC[(grepl(GeneDECalls.LC[,1],pattern = "Up-") )& as.numeric(GeneDECalls.LC[,2])>=threshold,]),
row.names(GeneDECalls.LJ[(grepl(GeneDECalls.LJ[,1],pattern = "Up-"))& as.numeric(GeneDECalls.LJ[,2])>=threshold,])),
union(row.names(GeneDECalls.GV[(grepl(GeneDECalls.GV[,1],pattern = "Up-") )& as.numeric(GeneDECalls.GV[,2])>=threshold,]),
row.names(GeneDECalls.M[(grepl(GeneDECalls.M[,1],pattern = "Up-"))& as.numeric(GeneDECalls.M[,2])>=threshold,]))
)
interesting_genes<-
setdiff(intersect(row.names(GeneDECalls.LC[(grepl(GeneDECalls.LC[,1],pattern = "Up-") )& as.numeric(GeneDECalls.LC[,2])>=threshold,]),
row.names(GeneDECalls.LJ[(grepl(GeneDECalls.LJ[,1],pattern = "Up-"))& as.numeric(GeneDECalls.LJ[,2])>=threshold,])),
union(row.names(GeneDECalls.GV[(grepl(GeneDECalls.GV[,1],pattern = "Up-") )& as.numeric(GeneDECalls.GV[,2])>=threshold,]),
row.names(GeneDECalls.M[(grepl(GeneDECalls.M[,1],pattern = "Up-"))& as.numeric(GeneDECalls.M[,2])>=threshold,]))
)
p<-ggplot(dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes #& BCS %in% c("LCRISPATUS","GVAGINALIS","MEDIA")
),aes(col=gene,lty=BCS,y=norm_count_log,x=ExposureTime.n))+geom_smooth(se = F)+geom_point()+facet_wrap(~BCS)
ggplotly(p)
setdiff(intersect(row.names(GeneDECalls.LC[(grepl(GeneDECalls.LC[,1],pattern = "Down-") )& as.numeric(GeneDECalls.LC[,2])>=threshold,]),
row.names(GeneDECalls.LJ[(grepl(GeneDECalls.LJ[,1],pattern = "Down-"))& as.numeric(GeneDECalls.LJ[,2])>=threshold,])),
union(row.names(GeneDECalls.GV[(grepl(GeneDECalls.GV[,1],pattern = "Down-") )& as.numeric(GeneDECalls.GV[,2])>=threshold,]),
row.names(GeneDECalls.M[(grepl(GeneDECalls.M[,1],pattern = "Down-"))& as.numeric(GeneDECalls.M[,2])>=threshold,]))
)
interesting_genes<-
setdiff(intersect(row.names(GeneDECalls.LC[(grepl(GeneDECalls.LC[,1],pattern = "Down-") )& as.numeric(GeneDECalls.LC[,2])>=threshold,]),
row.names(GeneDECalls.LJ[(grepl(GeneDECalls.LJ[,1],pattern = "Down-"))& as.numeric(GeneDECalls.LJ[,2])>=threshold,])),
union(row.names(GeneDECalls.GV[(grepl(GeneDECalls.GV[,1],pattern = "Down-") )& as.numeric(GeneDECalls.GV[,2])>=threshold,]),
row.names(GeneDECalls.M[(grepl(GeneDECalls.M[,1],pattern = "Down-"))& as.numeric(GeneDECalls.M[,2])>=threshold,]))
)
p<-ggplot(dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes #& BCS %in% c("LCRISPATUS","GVAGINALIS","MEDIA")
),aes(col=gene,lty=BCS,y=norm_count_log,x=ExposureTime.n))+geom_smooth(se = F)+geom_point()+facet_wrap(~BCS)
ggplotly(p)
heatmap.2(as.matrix(degenes[grepl(row.names(degenes),pattern = "HDAC"),grepl(names(degenes),pattern = "FC")]),trace = "none",col=rev(RColorBrewer::brewer.pal(n=11,name = "RdYlBu")),margins = c(8,6))
degenes<-read.table("~/Dropbox (IGS)/edgeR_results.txt",sep="\t",header = T,row.names = 1)
top_mir_genes<-unique(read.csv("~/Dropbox (IGS)/top_mir_targets.csv",header=T)$targets)
#row.names(degenes)<-degenes$gene
top_mir_genes_both<-unique(read.csv("~/Dropbox (IGS)/top_mir_targets_both.csv",header=T)$targets)
#row.names(degenes)<-degenes$gene
heatmap.2(as.matrix(degenes[grepl(row.names(degenes),pattern = "HDAC"),grepl(names(degenes),pattern = "FC")]),trace = "none",col=rev(RColorBrewer::brewer.pal(n=11,name = "RdYlBu")),margins = c(8,6))
row.names(degenes) %in% c("CCDC71","CHMP1A","DKK1","ERMAP","GABPB2","HDAC5","Histone h3","Histone h4","ING1","KAT2B","KLHDC10","MAGED2","NCAPG","NFIL3","NHLRC1","OGG1","OSGIN1","PADI3","PCBD2","POLD2","PROC","PTCD2","RAD52","RPL12","RPS9","RSAD2","SIRT3","SMC2","SPATS2L","TACC2","TPPP","UBC","ZNF239","ZNF302","ZNF420")
heatmap.2(as.matrix(degenes[grepl(row.names(degenes),pattern = "HDAC") | row.names(degenes) %in% c("CCDC71","CHMP1A","DKK1","ERMAP","GABPB2","HDAC5","Histone h3","Histone h4","ING1","KAT2B","KLHDC10","MAGED2","NCAPG","NFIL3","NHLRC1","OGG1","OSGIN1","PADI3","PCBD2","POLD2","PROC","PTCD2","RAD52","RPL12","RPS9","RSAD2","SIRT3","SMC2","SPATS2L","TACC2","TPPP","UBC","ZNF239","ZNF302","ZNF420"),grepl(names(degenes)","pattern = "FC")]),trace = "none",col=rev(RColorBrewer::brewer.pal(n=11,name = "RdYlBu")),margins = c(8,6))
grepl(row.names(degenes),pattern = "HDAC")
grepl(row.names(degenes),pattern = "HDAC") | row.names(degenes) %in% c("CCDC71","CHMP1A","DKK1","ERMAP","GABPB2","HDAC5","Histone h3","Histone h4","ING1","KAT2B","KLHDC10","MAGED2","NCAPG","NFIL3","NHLRC1","OGG1","OSGIN1","PADI3","PCBD2","POLD2","PROC","PTCD2","RAD52","RPL12","RPS9","RSAD2","SIRT3","SMC2","SPATS2L","TACC2","TPPP","UBC","ZNF239","ZNF302","ZNF420")
heatmap.2(as.matrix(degenes[grepl(row.names(degenes),pattern = "HDAC") | row.names(degenes) %in% c("CCDC71","CHMP1A","DKK1","ERMAP","GABPB2","HDAC5","Histone h3","Histone h4","ING1","KAT2B","KLHDC10","MAGED2","NCAPG","NFIL3","NHLRC1","OGG1","OSGIN1","PADI3","PCBD2","POLD2","PROC","PTCD2","RAD52","RPL12","RPS9","RSAD2","SIRT3","SMC2","SPATS2L","TACC2","TPPP","UBC","ZNF239","ZNF302","ZNF420"),grepl(names(degenes),pattern = "FC")]),trace = "none",col=rev(RColorBrewer::brewer.pal(n=11,name = "RdYlBu")),margins = c(8,6))
heatmap.2(as.matrix(degenes[grepl(row.names(degenes),pattern = "HDAC") | row.names(degenes) %in% c("CCDC71","CHMP1A","DKK1","ERMAP","GABPB2","HDAC5","Histone h3","Histone h4","ING1","KAT2B","KLHDC10","MAGED2","NCAPG","NFIL3","NHLRC1","OGG1","OSGIN1","PADI3","PCBD2","POLD2","PROC","PTCD2","RAD52","RPL12","RPS9","RSAD2","SIRT3","SMC2","SPATS2L","TACC2","TPPP","UBC","ZNF239","ZNF302","ZNF420","ATF3","CAV1","CCNE1","EGFR","FGF2","FUT4","IFIT1","IFIT2","IL1B","MMP1","MMP10","MMP9","MX1","RABEPK","RB1","SERPINB2","SOD2","TERC","TP53"),grepl(names(degenes),pattern = "FC")]),trace = "none",col=rev(RColorBrewer::brewer.pal(n=11,name = "RdYlBu")),margins = c(8,6))
interesting_genes<-c("CCDC71","CHMP1A","DKK1","ERMAP","GABPB2","HDAC5","Histone h3","Histone h4","ING1","KAT2B","KLHDC10","MAGED2","NCAPG","NFIL3","NHLRC1","OGG1","OSGIN1","PADI3","PCBD2","POLD2","PROC","PTCD2","RAD52","RPL12","RPS9","RSAD2","SIRT3","SMC2","SPATS2L","TACC2","TPPP","UBC","ZNF239","ZNF302","ZNF420","ATF3","CAV1","CCNE1","EGFR","FGF2","FUT4","IFIT1","IFIT2","IL1B","MMP1","MMP10","MMP9","MX1","RABEPK","RB1","SERPINB2","SOD2","TERC","TP53")
p<-ggplot(dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes #& BCS %in% c("LCRISPATUS","GVAGINALIS","MEDIA")
),aes(col=gene,lty=BCS,y=norm_count_log,x=ExposureTime.n))+geom_smooth(se = F)+geom_point()+facet_wrap(~BCS)
ggplotly(p)
plot_timeseries<-function(Normalized_count.HMM,interesting_genes,plot_bcss=c("LCRISPATUS","GVAGINALIS","MEDIA"),plot_plotly=F){
p<-ggplot(dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes & BCS %in% plot_bcss
),aes(col=gene,lty=BCS,y=norm_count_log,x=ExposureTime.n))+geom_smooth(se = F)+geom_point()+facet_wrap(~BCS)
if(plot_plotly)
ggplotly(p)
}else{
plot_timeseries<-function(Normalized_count.HMM,interesting_genes,plot_bcss=c("LCRISPATUS","GVAGINALIS","MEDIA"),plot_plotly=F){
p<-ggplot(dplyr::filter(Normalized_count.HMM,gene %in% interesting_genes & BCS %in% plot_bcss
),aes(col=gene,lty=BCS,y=norm_count_log,x=ExposureTime.n))+geom_smooth(se = F)+geom_point()+facet_wrap(~BCS)
if(plot_plotly){
ggplotly(p)
}else{
plot(p)
}
}
plot_timeseries()
plot_timeseries(Normalized_count.HMM,interesting_genes)
plot_timeseries(Normalized_count.HMM,interesting_genes,plot_plotly = T)
HDAC_genes<-c("APAF1","ATF3","CSF1R","CYP24A1","EGFR","EGR1","FBXO32","IGFBP3","KLF10","MT1E","NDRG4","NR4A1","PREX1","TGFBR2","TP63")
plot_timeseries(Normalized_count.HMM,HDAC_genes,plot_plotly = T)
log(10,10)
exp_filer=log(10,10)
Normalized_count.HMM<exp_filter
exp_filter=log(10,10)
Normalized_count.HMM<exp_filter
exp_filter
Normalized_count.HMM$norm_count_log<exp_filter
Normalized_count.HMM[!Normalized_count.HMM$norm_count_log<exp_filter,]
plot_timeseries<-function(Normalized_count.HMM,interesting_genes,plot_bcss=c("LCRISPATUS","LJENSENII","LINERS","GVAGINALIS","MEDIA"),plot_plotly=F,exp_filter=log(10,10)){
p<-ggplot(dplyr::filter(Normalized_count.HMM[!Normalized_count.HMM$norm_count_log<exp_filter,],gene %in% interesting_genes & BCS %in% plot_bcss
),aes(col=gene,lty=BCS,y=norm_count_log,x=ExposureTime.n))+geom_smooth(se = F)+geom_point()+facet_wrap(~BCS)
if(plot_plotly){
ggplotly(p)
}else{
plot(p)
}
}
plot_timeseries(Normalized_count.HMM,HDAC_genes,plot_plotly = T)
plot_timeseries(Normalized_count.HMM,HDAC_genes,plot_plotly = T,exp_filter = -5)
degenes
head(degenes)
names(degenes)
rowSums(degenes[,grepl(names(degenes),pattern = "logFC")])
rowSums(abs(degenes[,grepl(names(degenes),pattern = "logFC")]))
order(rowSums(abs(degenes[,grepl(names(degenes),pattern = "logFC")])))
row.names(degenes)[order(rowSums(abs(degenes[,grepl(names(degenes),pattern = "logFC")])))]
row.names(degenes)[order(rowSums(abs(degenes[,grepl(names(degenes),pattern = "logFC")])),decreasing = T)]
head(row.names(degenes)[order(rowSums(abs(degenes[,grepl(names(degenes),pattern = "logFC")])),decreasing = T)])
top_genes<-head(row.names(degenes)[order(rowSums(abs(degenes[,grepl(names(degenes),pattern = "logFC")])),decreasing = T)])
plot_timeseries(Normalized_count.HMM,top_genes,plot_plotly = T,exp_filter = -5)
names(degenes)
abs(degenes[,grepl(names(degenes),pattern = "PValue")])
rowSums(abs(degenes[,grepl(names(degenes),pattern = "PValue")])<=0.05)
top_genes<-head(row.names(degenes)[order(rowSums(abs(degenes[,grepl(names(degenes),pattern = "PValue")])<=0.05),decreasing = T)])
top_genes
plot_timeseries(Normalized_count.HMM,top_genes,plot_plotly = T,exp_filter = -5)
rowSums(abs(degenes[,grepl(names(degenes),pattern = "PValue")])<=0.05)
order(rowSums(abs(degenes[,grepl(names(degenes),pattern = "PValue")])<=0.05),decreasing = T)
row.names(degenes)[order(rowSums(abs(degenes[,grepl(names(degenes),pattern = "PValue")])<=0.05),decreasing = T)]
desets
cell_cycle<-c("SKP2","CCNE1","CDC25A","RBL1","RB1","EGFR","ESR1","HDAC4","HDAC9")
plot_timeseries(Normalized_count.HMM,cell_cycle,plot_plotly = T,exp_filter = -5)
cell_cycle<-c("SKP2","CCNE1","CDC25A","RBL1","RB1","EGFR","ESR1","HDAC4","HDAC9","FGFR2","NFKB2","FGFR1","EGFR","AKT3","IRS2","CREB3L4","CREB1","PIK3R1","PIK3CB","ESR1","RELA")
plot_timeseries(Normalized_count.HMM,cell_cycle,plot_plotly = T,exp_filter = -5)
cell_cycle<-c("CCNE1","CDC25A","RBL1","RB1","EGFR","ESR1","HDAC4","HDAC9","FGFR2","NFKB2","FGFR1","EGFR","AKT3","IRS2","CREB3L4","CREB1","PIK3R1","PIK3CB","ESR1","RELA")
plot_timeseries(Normalized_count.HMM,cell_cycle,plot_plotly = T,exp_filter = -5)
cell_cycle<-c("CCNE1","EGFR","ESR1","HDAC4","HDAC9","FGFR2","NFKB2","FGFR1","EGFR","AKT3","ESR1")
plot_timeseries(Normalized_count.HMM,cell_cycle,plot_plotly = T,exp_filter = -5)
plot_timeseries<-function(Normalized_count.HMM,interesting_genes,plot_bcss=c("LCRISPATUS","LJENSENII","LINERS","GVAGINALIS","MEDIA"),plot_plotly=F,exp_filter=log(10,10),wrap=F){
p<-ggplot(dplyr::filter(Normalized_count.HMM[!Normalized_count.HMM$norm_count_log<exp_filter,],gene %in% interesting_genes & BCS %in% plot_bcss
),aes(col=gene,lty=BCS,y=norm_count_log,x=ExposureTime.n))+geom_smooth(se = F)+geom_point()
if(wrap){
p<-p+facet_wrap(~BCS)
}
if(plot_plotly){
ggplotly(p)
}else{
plot(p)
}
}
plot_timeseries<-function(Normalized_count.HMM,interesting_genes,plot_bcss=c("LCRISPATUS","LJENSENII","LINERS","GVAGINALIS","MEDIA"),plot_plotly=F,exp_filter=log(10,10),wrap=T){
p<-ggplot(dplyr::filter(Normalized_count.HMM[!Normalized_count.HMM$norm_count_log<exp_filter,],gene %in% interesting_genes & BCS %in% plot_bcss
),aes(col=gene,lty=BCS,y=norm_count_log,x=ExposureTime.n))+geom_smooth(se = F)+geom_point()
if(wrap){
p<-p+facet_wrap(~BCS)
}
if(plot_plotly){
ggplotly(p)
}else{
plot(p)
}
}
plot_timeseries(Normalized_count.HMM,cell_cycle,plot_plotly = T,exp_filter = -5)
plot_timeseries(Normalized_count.HMM,cell_cycle,plot_plotly = T,exp_filter = -5,wrap = F)
plot_timeseries(Normalized_count.HMM,"EGFR",plot_plotly = T,exp_filter = -5,wrap = F)
plot_timeseries<-function(Normalized_count.HMM,interesting_genes,plot_bcss=c("LCRISPATUS","LJENSENII","LINERS","GVAGINALIS","MEDIA"),plot_plotly=F,exp_filter=log(10,10),wrap=T){
p<-ggplot(dplyr::filter(Normalized_count.HMM[!Normalized_count.HMM$norm_count_log<exp_filter,],gene %in% interesting_genes & BCS %in% plot_bcss
),aes(col=gene,pch=BCS,lty=BCS,y=norm_count_log,x=ExposureTime.n))+geom_smooth(se = F)+geom_point()
if(wrap){
p<-p+facet_wrap(~BCS)
}
if(plot_plotly){
ggplotly(p)
}else{
plot(p)
}
}
plot_timeseries(Normalized_count.HMM,"EGFR",plot_plotly = T,exp_filter = -5,wrap = F)
plot_timeseries(Normalized_count.HMM,"HDAC9",plot_plotly = T,exp_filter = -5,wrap = F)
plot_timeseries(Normalized_count.HMM,"HDAC4",plot_plotly = T,exp_filter = -5,wrap = F)
plot_timeseries(Normalized_count.HMM,"CCNE1",plot_plotly = T,exp_filter = -5,wrap = F)
plot_timeseries(Normalized_count.HMM,"ESR1",plot_plotly = T,exp_filter = -5,wrap = F)
plot_timeseries(Normalized_count.HMM,"IL1B",plot_plotly = T,exp_filter = -5,wrap = F)
plot_timeseries(Normalized_count.HMM,"IL6",plot_plotly = T,exp_filter = -5,wrap = F)
plot_timeseries(Normalized_count.HMM,"IL8",plot_plotly = T,exp_filter = -5,wrap = F)
plot_timeseries(Normalized_count.HMM,"IL8R",plot_plotly = T,exp_filter = -5,wrap = F)
plot_timeseries(Normalized_count.HMM,"HBD2",plot_plotly = T,exp_filter = -5,wrap = F)
Normalized_count.HMM[grepl(row.names(Normalized_count.HMM),pattern = "HBD")]
Normalized_count.HMM[grepl(row.names(Normalized_count.HMM),pattern = "IL8")]
row.names(Normalized_count.HMM)
Normalized_count.HMM
Normalized_count.HMM[grepl(Normalized_count.HMM$gene,pattern = "IL8"),]
Normalized_count.HMM$gene
Normalized_count.HMM[grepl(Normalized_count.HMM$gene,pattern = "HBD"),]
Normalized_count.HMM[grepl(Normalized_count.HMM$gene,pattern = "HBD2"),]
plot_timeseries(Normalized_count.HMM,"DEFB4A",plot_plotly = T,exp_filter = -5,wrap = F)
plot_timeseries(Normalized_count.HMM,"CXCL8",plot_plotly = T,exp_filter = -5,wrap = F)
plot_timeseries(Normalized_count.HMM,"CXCL6",plot_plotly = T,exp_filter = -5,wrap = F)
Normalized_count.HMM[grepl(Normalized_count.HMM$gene,pattern = "CXCL"),]
Normalized_count.HMM[grepl(Normalized_count.HMM$gene,pattern = "CXCL"),"gene"]
Normalized_count.HMM[grepl(Normalized_count.HMM$gene,pattern = "CXCL3"),"gene"]
plot_timeseries(Normalized_count.HMM,Normalized_count.HMM[grepl(Normalized_count.HMM$gene,pattern = "CXCL"),"gene"],plot_plotly = T,exp_filter = -5,wrap = F)
plot_timeseries(Normalized_count.HMM,Normalized_count.HMM[grepl(Normalized_count.HMM$gene,pattern = "CXCL"),"gene"],plot_plotly = T,exp_filter = -5,wrap = T)
HDAC_genes
heatmap.2(as.matrix(degenes[row.names(degenes) %in% c(cell_cycle,HDAC_genes),grepl(names(degenes),pattern = "FC")]),trace = "none",col=rev(RColorBrewer::brewer.pal(n=11,name = "RdYlBu")),margins = c(8,6))
cell_cycle
heatmap.2(as.matrix(degenes[row.names(degenes) %in% c(cell_cycle,HDAC_genes,"CXCL8","CXCL6"),grepl(names(degenes),pattern = "FC")]),trace = "none",col=rev(RColorBrewer::brewer.pal(n=11,name = "RdYlBu")),margins = c(8,6))
degenes
t.test2 <- function(m1, ## mean of sample set 1
m2, ## mean of sample set 2
s1, ## standard dev of sample set 1
s2, ## standard dev of sample set 2
n1, ## number of samples in sample set 1
n2, ## number of samples in sample set 1
m0=0, ## the null for hypothesis to test (mean value)=
equal.variance=FALSE) #whether to assume equal variance between sample sets
{
if( equal.variance==FALSE )
{
## "normalize" standard deviations if unequal variance to compute standard error
se <- sqrt( (s1^2/n1) + (s2^2/n2) )
# welch-satterthwaite df
df <- ( (s1^2/n1 + s2^2/n2)^2 )/( (s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1) )
} else
{
# pooled standard deviation, scaled by the sample sizes
se <- sqrt( (1/n1 + 1/n2) * ((n1-1)*s1^2 + (n2-1)*s2^2)/(n1+n2-2) )
df <- n1+n2-2
}
t <- (m1-m2-m0)/se## calcualte t statistic
dat <- c(m1-m2, se, t, 2*pt(-abs(t),df))    ## calculate p value based on Student's t distribution
names(dat) <- c("Difference of means", "Std Error", "t", "p-value")
return(dat)
}
t.test2(3.536549333,3.720989,0.160913808,0.061790438,n1 = 3,n2 = 3)
t.test2(4.059654333,2.688795667,.2,.43,n1 = 3,n2 = 3)
t.test2(5.157793667,4.131211667,.33,.46,n1 = 3,n2 = 3)
data.frame(conc=c(11.62696019,
11.92882992,
9.301568154,
12.5969697,
13.05363636,
11.50606061),dct=c(
-1.520288667,
-0.997183667,
0.100955667,
-1.335849,
-2.368042333,
-0.925626333
))
data.frame(conc=c(11.62696019,
11.92882992,
9.301568154,
12.5969697,
13.05363636,
11.50606061),dct=c(
-1.520288667,
-0.997183667,
0.100955667,
-1.335849,
-2.368042333,
-0.925626333
),isomer=c(
"D","D","D","L","L","L"
))
lmt<-data.frame(conc=c(11.62696019,
11.92882992,
9.301568154,
12.5969697,
13.05363636,
11.50606061),dct=c(
-1.520288667,
-0.997183667,
0.100955667,
-1.335849,
-2.368042333,
-0.925626333
),isomer=c(
"D","D","D","L","L","L"
))
lm(formula =dct~conc*isomer,data = lmt )
summary(lm(formula =dct~conc*isomer,data = lmt ))
View(lmt)
rm(list=ls())
library(ggbiplot)
library(tidyverse)
library(edgeR)
library(DESeq)
library(psych)
library(RColorBrewer)
library(plyr)
TRL_counts_table<-read.csv(file=paste0(root_dir,"TRL_counts_table.csv"),row.names = 1)
root_dir<-"~/Dropbox (IGS)/Jacques_Steve_Shared/Manuscript/mRNA/"
TRL_counts_table<-read.csv(file=paste0(root_dir,"TRL_counts_table.csv"),row.names = 1)
GetNormalizedMat
# Chunk 1: setup
rm(list=ls())
library(ggbiplot)
library(tidyverse)
library(edgeR)
library(DESeq)
library(psych)
library(RColorBrewer)
library(plyr)
library(gplots)
library(EBSeq)
library(EBSeqHMM)
library(reshape)
library(plotly)
root_dir<-"~/Dropbox (IGS)/Jacques_Steve_Shared/Manuscript/mRNA/"
# Chunk 2: functions
plot_replicates<-function(eset,BCS.selection=c(""),ExposureTime.selection=c(""),logt=F,rmlow=F,lowcnt=10){
if(logt){
cnts<-log(exprs(eset)+1,base = 2)
}else{
cnts<-exprs(eset)
}
if(rmlow){
cnts<-cnts[rowSums(cnts>lowcnt)==ncol(cnts),]
}
pairs.panels(cnts[, pData(eset)$BCS %in% c(BCS.selection) & pData(eset)$ExposureTime %in% c(ExposureTime.selection)])
}
subset_ExpressionSet<-function(expSet, ##expression set
filterOut=c(""), ##vector of samples to drop from expSet
samples=TRUE){ ## filter samples names or row names
## Drop sample (columns) from expSet
if(samples){
## Remove count data in filterOut vector
counts_meta<-exprs(expSet)[,!colnames(exprs(expSet)) %in% filterOut]
## Remove metadata in filterOut vector
design.subset<-pData(expSet)[!row.names(pData(expSet)) %in% filterOut,]
## Return a re-packaged filtered count and metadata into ExpressionSet
}
else{## Drop miRNAs (rows) from expSet
counts_meta<-exprs(expSet)[!row.names(exprs(expSet)) %in% filterOut,]
design.subset<-pData(expSet)[,!colnames(pData(expSet)) %in% filterOut]
}
return(ExpressionSet(assayData = as.matrix(counts_meta),
phenoData = AnnotatedDataFrame(design.subset)))
}
intersect_hmm_genes<-function(
GeneDECalls.comp,
GeneDECalls.ref,
dir1.A = c("Up-Up"),
dir2.A = c("Down-Down","EE-EE"),
dir1.B = c("Down-Down"),
dir2.B = c("Up-Up","EE-EE"),
hmm.pval=0.7
){
set1.A<-row.names(GeneDECalls.comp[GeneDECalls.comp[,1] %in% dir1.A &                                              as.numeric(GeneDECalls.comp[,2])>=hmm.pval,])
set2.A<-row.names(GeneDECalls.ref[GeneDECalls.ref[,1] %in% dir2.A & as.numeric(GeneDECalls.ref[,2])>=hmm.pval,])
set1.B<-row.names(GeneDECalls.comp[GeneDECalls.comp[,1] %in% dir1.B &                                              as.numeric(GeneDECalls.comp[,2])>=hmm.pval,])
set2.B<-row.names(GeneDECalls.ref[GeneDECalls.ref[,1] %in% dir2.B & as.numeric(GeneDECalls.ref[,2])>=hmm.pval,])
return(list(intersection=unique(c(intersect(set1.A,set2.A),intersect(set1.B,set2.B)))))
}
# Chunk 4: create_tables
TRL_counts_table<-read.csv(file=paste0(root_dir,"TRL_counts_table.csv"),row.names = 1)
## Filter out ambiguous, no feature reads. Make note of how many there are
TRL_counts_table[row.names(TRL_counts_table) %in% c("alignment_not_unique","no_feature","ambiguous"),]
## Percentage of ambiguous/no feature/non unique reads
(ambig_nofeat_readpercent<-100*colSums(TRL_counts_table[row.names(TRL_counts_table) %in% c("alignment_not_unique","no_feature","ambiguous"),])/colSums(TRL_counts_table))
hist(ambig_nofeat_readpercent,main="Percentage of Ambiguous/no feature/non-unique reads",xlab="Percentage of total trimmed reads",ylab="Proportion")
ambig_nofeat_readpercent.high<-ambig_nofeat_readpercent[ambig_nofeat_readpercent>80]
#Filter out these reads
TRL_counts_table<-TRL_counts_table[!row.names(TRL_counts_table) %in% c("alignment_not_unique","no_feature","ambiguous"),]
TRL_counts_table<-TRL_counts_table[,order(names(TRL_counts_table))]
hist(log(as.matrix(TRL_counts_table)),main="log10 read counts, all samples",xlab="Log10 read count")
##Create Design Table
TRL_design<-data.frame(Sample=names(TRL_counts_table))
row.names(TRL_design)<-TRL_design$Sample
TRL_design<-separate(TRL_design,Sample,sep = "_",into = c("CellLine","BCS","DROP","ExposureTime","rep")) %>% dplyr::select(-c(CellLine,DROP))
TRL_design$rep<-as.numeric(gsub(TRL_design$rep,pattern = "rep",replacement = ""))
TRL_design$Lactobacillus<-grepl(TRL_design$BCS,pattern = "^L")
TRL_design$group1 <- factor(paste(TRL_design$BCS,TRL_design$ExposureTime,sep="."))
#Create dummy variables for use in plot_PCA
TRL_design$Batch<-gsub(TRL_design$ExposureTime,pattern = "HR",replacement = "")
TRL_design$SID<-TRL_design$BCS
TRL_design$BVGroup<-TRL_design$Lactobacillus
TRL_design$NUGENT_CLASS<-TRL_design$group1
TRL_design$BCS<-factor(TRL_design$BCS,levels = c("LCRISPATUS","LJENSENII","LINERS","GVAGINALIS","MEDIA"),ordered = T)
TRL_design$ExposureTime<-factor(TRL_design$ExposureTime,levels = c("4HR","13HR","22HR"),ordered=T)
sample_order<-with(TRL_design,order(ExposureTime,BCS,rep))
##MAke an expression set object
TRL_design<-TRL_design[sample_order,]
TRL_counts_table<-TRL_counts_table[,sample_order]
TRL_counts_meta<-ExpressionSet(assayData = as.matrix(TRL_counts_table),phenoData  = AnnotatedDataFrame(TRL_design))
#(pca.et<-plot_pca(TRL_counts_meta,color_by ="SID" ,logt = T,plot_title = "BCS"))
#(pca.l<-plot_pca(TRL_counts_meta,color_by ="BVGroup" ,logt = T,plot_title = "Lactobacillus"))
#(pca.bcs<-plot_pca(TRL_counts_meta,color_by ="Batch" ,logt = T,plot_title = "Exposure Time"))
#(pca.g1<-plot_pca(TRL_counts_meta,color_by ="NugentC" ,logt = T,plot_title = "group1"))
#pca.et$gPCA.result$p.val
#pca.l$gPCA.result$p.val
#pca.bcs$gPCA.result$p.val
#pca.g1$gPCA.result$p.val
## Remove low counts--
y<-DGEList(exprs(TRL_counts_meta))
hist(log(cpm(y),10))
summary(y$counts)
dim(y)
keep <- rowSums(cpm(y)>10^0.5) >= nrow(y$samples)*1
#y <- y[keep,,keep.lib.sizes=FALSE]
dim(y)
hist(log(cpm(y),10))
abline(v = log(.4,10))
hist(log(as.matrix(y$counts),10))
hist(log(as.matrix(TRL_counts_meta),10))
TRL_counts_meta.rmlow<-ExpressionSet(y$counts,phenoData = AnnotatedDataFrame(pData(TRL_counts_meta)))
TRL_counts_meta.rmlow.output<-data.frame(exprs(TRL_counts_meta.rmlow))
names(TRL_counts_meta.rmlow.output)<-paste0(pData(TRL_counts_meta.rmlow)$ExposureTime,"_",pData(TRL_counts_meta.rmlow)$BCS)
write.csv(TRL_counts_meta.rmlow.output,file="~/Dropbox (IGS)/Jacques_Steve_Shared/Manuscript/TRL_counts_table_rmlow.csv",quote = F,row.names = T)
hist(log(as.matrix(TRL_counts_meta.rmlow)))
(color_map<-setNames(nm = unique(pData(TRL_counts_meta.rmlow)$ExposureTime),object = brewer.pal(length(unique(pData(TRL_counts_meta.rmlow)$BCS)),"Set3")))
heatmap.2(t(log(exprs(TRL_counts_meta.rmlow)[rowSums(exprs(TRL_counts_meta.rmlow)>100)==40,])),trace='non',RowSideColors = unname(color_map[pData(TRL_counts_meta.rmlow)$BCS]),margins=c(5,13))
display.brewer.all()
# Chunk 6: drop_samples
##Drop poor QC samples
TRL_counts_meta.rmlow<-subset_ExpressionSet(TRL_counts_meta.rmlow,filterOut = c("VK2_MEDIA_BCS_4HR_rep3","VK2_LCRISPATUS_BCS_13HR_rep3"))
## Proportion of genes with at least 1 read across all samples
sum(rowSums(exprs(TRL_counts_meta.rmlow)>0)>0)/nrow(exprs(TRL_counts_meta.rmlow))
exprs(TRL_counts_meta.rmlow)[rowSums(exprs(TRL_counts_meta.rmlow)>0)>0,]
##Summary of genes with at least one read across all samples
summary(rowSums(exprs(TRL_counts_meta.rmlow)[rowSums(exprs(TRL_counts_meta.rmlow)>0)>0,]>0))
ncol(exprs(TRL_counts_meta.rmlow))
## Summary of remaining total read counts
summary(colSums(exprs(TRL_counts_meta.rmlow)))
hist(log(exprs(TRL_counts_meta.rmlow)[,colSums(exprs(TRL_counts_meta.rmlow))>4888000],base = 10))
reps_per_treatment<-ddply(data.frame(pData(TRL_counts_meta.rmlow)),c("BCS","ExposureTime"),summarise,n=length(BCS))
# Chunk 7: edgeR
design <-model.matrix(~0+group1,data = pData(TRL_counts_meta.rmlow))
y<-DGEList(exprs(TRL_counts_meta.rmlow))
y<-estimateDisp(y,design)
TRL_counts_meta.rmlow
pData(TRL_counts_meta.rmlow)
design
y<-DGEList(exprs(TRL_counts_meta.rmlow))
design <-model.matrix(~0+group1,data = pData(TRL_counts_meta.rmlow))
y<-DGEList(exprs(TRL_counts_meta.rmlow))
y<-estimateDisp(y,design)
design <-model.matrix(~0+group1,data = pData(TRL_counts_meta.rmlow))
y<-DGEList(exprs(TRL_counts_meta.rmlow))
y<-estimateDisp(y,design)
exprs(TRL_counts_meta.rmlow)
design
design <-model.matrix(~0+group1,data = pData(TRL_counts_meta.rmlow))
